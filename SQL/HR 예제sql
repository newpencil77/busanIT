--1. employees 테이블에서 employee_id, first_name, last_name을 출력하세요.
--기본 SELECT

SELECT 
employee_id,
first_name,
last_name
    FROM employees;

--예제-2) employees 테이블로부터  first_name, salary,  salary * 1.1  AS 뉴셀러리 출력하세요.
--별칭

SELECT 
first_name,
salary,
(salary*1.1) AS 뉴셀러리
    FROM employees;
    
--예제-3) employees 테이블에서 employee_id는 ‘사원번호’, first_name은 ‘이름’, 
--last_name은 ‘성’으로 출력하세요.  
--별칭

SELECT 
employee_id AS 사원번호,
first_name AS 이름,
last_name AS 성
    FROM employees;
    
--예제 -4) employees 테이블에서 employee_id를 출력하고, 
--first_name과 last_name을 붙여서 출력하되 가운데 한 칸을 띄워 주세요. 
--다음 열에는 email을 출력하되 @company.com 문구를 붙여서 출력하세요.
-- || 연결 연산자
SELECT 
employee_id,
first_name || ' ' || last_name,
email || '@company.com'
    FROM employees;
    
SELECT 
employee_id,
CONCAT(first_name, CONCAT(' ', last_name)),
CONCAT(email,'@company.com')
    FROM employees; 


--예제 5) employees 테이블에서 employee_id 가 100인 직원 정보를 출력하세요.
--기본 WHERE절
SELECT *
    FROM employees
    WHERE employee_id = 100;
    

--예제 6) employees 테이블에서 first_name 이 David 인 직원 정보를 출력하세요.
--기본 WHERE절

SELECT *
    FROM employees
    WHERE first_name = 'David';

--예제 7) employees 테이블에서 employee_id가 105 이하인 직원 정보를 출력하세요.
--기본 WHERE절

SELECT *
    FROM employees
    WHERE employee_id <= 105;

--예제 7) job_history 테이블에서 start_date 가 2006년 3월 3일 이후인 정보를 출력.
--기본 WHERE절

SELECT *
    FROM job_history
    WHERE start_date > '2006/03/03';

--예제 8) departments 테이블에서 location_id 가 1700 이 아닌 모든 부서를 출력하라.
--기본 WHERE절

SELECT *
    FROM departments
    WHERE location_id != 1700;

--예제 9) employees 테이블에서 salary가 4000을 초과하면서 , 
--job_id가 IT_PROG인 employee들을 조회하세요. 
--AND

SELECT *
    FROM employees
    WHERE salary > 4000 AND job_id = 'IT_PROG';

--예제 10) employees 테이블에서 salary가 4000을 초과하면서(AND), 
--job_id가 IT_PROG거나(OR) FI_ACCOUNT인 경우를 조회하세요.
--AND, OR

SELECT *
    FROM employees
    WHERE salary >4000 AND (job_id = 'IT_PROG' OR job_id= 'FI_ACCOUNT');


--예제 11) employees 테이블에서 salary가 10000, 17000, 24000인 직원 정보를 출력하세요
--IN

SELECT *
    FROM employees
    WHERE salary IN (10000, 17000, 24000);

--예제 12) employees 테이블에서 department_ID가  30 , 50, 80, 100, 110 이 아닌 직원 정보를 출력하세요.
--IN

SELECT *
    FROM employees
    WHERE department_id NOT IN (30, 50, 80, 100, 110);


--예제 13) employees 테이블에서 
--salary가 10,000 이상이고 20,000 이하인 직원 정보를 출력하세요.
--BETWEEN

SELECT *
    FROM employees
    WHERE salary BETWEEN 10000 AND 20000;
    

--예제 14) employees 테이블에서 
--hire_date 가 2004년 1월 1일 부터 2004년 12월 30일 사이인 직원 정보를 출력하세요
--BETWEEN

SELECT *
    FROM employees
    WHERE hire_date BETWEEN '2004/01/01' AND '2004/12/30';
    
--예제 15) employees 테이블에서 salary가 7000 미만이거나, 
--17000 보다 많은 사원을 출력하라  
--BETWEEN

SELECT *
    FROM employees
    WHERE salary < 7000 OR salary > 17000;
    
SELECT *
    FROM employees
    WHERE salary NOT BETWEEN 7000 AND 17000;

--예제 16 )  employees 테이블에서 job_id 값이 AD를 포함하는 모든  데이터를 조회하세요.
--LIKE

SELECT *
    FROM employees
    WHERE job_id LIKE '%AD%';

--예제 17) employees 테이블에서 job_id 가 AD를 포함하면서 
--AD 뒤에 따라오는 문자열이 3자리인 데이터 값을 갖는 직원 정보를 조회하세요.
--LIKE

SELECT *
    FROM employees
    WHERE job_id LIKE '%AD___';

--예제 18) employees 테이블에서 전화번호 뒷자리가 1234로 끝나는 직원 정보를 조회하세요
--LIKE

SELECT *
    FROM employees
    WHERE phone_number LIKE '%1234';
    
--예제 19) employees 테이블에서 전화번호에 3이 들어가지 않으면서 
--전화번호 끝자리가 9로 끝나는 직원 정보를 출력하시오.
--LIKE

SELECT *
    FROM employees
    WHERE phone_number NOT LIKE '%3%' AND phone_number LIKE '%9';
   
--예제 20) employees 테이블에서 job_id 에 MGR 을 포함하거나 , 
--ASST  를 포함하는 직원 정보를 조회하세요.
--LIKE

SELECT *
    FROM employees
    WHERE job_id LIKE '%MGR%' OR job_id LIKE '%ASST%';
    

--예제 21) employees 테이블에서 manager_id가 null 값인 직원 정보를 출력해 보세요.
--IS NULL

SELECT *
    FROM employees
    WHERE manager_id IS NULL;

--예제 22) employees 테이블에서 employee_id, first_name, last_name을 출력하고 
--employee_id를 기준으로 내림차순 정렬하세요.
--ORDER BY

SELECT 
employee_id,
first_name,
last_name
    FROM employees
ORDER BY employee_id DESC;  

--예제 23) employees 테이블에서 
--job_id 에 CLERK 란 단어가 들어가는 직원들의 salary 가 높은 순으로 정렬하세요.
-- LIKE , ORDER BY

SELECT *
    FROM employees
    WHERE job_id LIKE '%CLERK%'
ORDER BY salary DESC;    
    

--예제 24) employees 테이블에서 
--employee_id (직원번호)가 120에서 150번까지 직원을 
--부서번호(department_id)가 큰순으로 정렬하고 부서번호가 같을시 월급(salary)이 큰순으로 정렬하라.
-- BETWEEN, ORDER BY

SELECT *
    FROM employees
    WHERE employee_id BETWEEN 120 AND 150
ORDER BY department_id DESC, salary DESC;


---------------------------오라클 함수-----------------------------

--예제 25) '홍 길동'을 성과 이름으로 나눠 출력하기
--SUBSTR, INSTR
--SUBSTR(문자열, 시작위치, 출력문자 개수)
--INSTR(문자열, 검색문자, [시작위치,[몇 번째 해당 문자]])

SELECT
'홍 길동' AS 성명,
SUBSTR('홍 길동', 1, INSTR('홍 길동', ' ', 1)-1) AS 성,
SUBSTR('홍 길동', INSTR('홍 길동', ' ', 1)+1) AS 이름
    FROM dual;



--예제 26) employees 테이블에서 last_name을 소문자와 대문자로 각각 출력하고, 
--email의 첫 번째 문자는 대문자로 출력하세요.
--LOWER, UPPER, INITCAP

SELECT 
LOWER(last_name),
UPPER(last_name),
INITCAP(email)
    FROM employees;
    

--예제 27)employees 테이블에서 job_id 데이터 값의 첫째 자리부터 시작해서 
--두 개의 문자를 출력하세요.
--SUBSTR

SELECT 
job_id,
SUBSTR(job_id,1,2)
    FROM employees;


--예제 28) employees 테이블에서 salary를 30으로 나눈 후 나눈 값의 결과를 반올림하여  
--정수, 소수점 첫째 자리, 10의 자리로 나타내시오.
--ROUND

SELECT
ROUND(salary/30),
ROUND(salary/30, 1),
ROUND(salary/30, -1)
    FROM employees;

--예제 29) employees 테이블에서 department_id가 100인 직원에 대해 
--오늘 날짜, hire_date, 오늘 날짜와 hire_date 사이의 개월 수를 출력하세요.
--MONTHS_BETWEEN

SELECT
SYSDATE,
hire_date,
MONTHS_BETWEEN(SYSDATE,hire_date)
    FROM employees
    WHERE department_id = 100;


--예제 30) employees 테이블에서 employee_id가 100과 106 사이인 직원의 hire_date에 
--3개월을 더한 값, hire_date에 3개월을 뺀 값을 출력하세요.
--ADD_MONTHS

SELECT 
hire_date,
ADD_MONTHS(hire_date, 3),
ADD_MONTHS(hire_date, -3)
    FROM employees
    WHERE employee_id BETWEEN 100 AND 106;


--예제 31) employees 테이블에서 department_id 가 100인 사원들의 입사일을 이용하여 
--employee_id와 입사월(MM/YY 형식) 출력
--TO_CHAR

SELECT
employee_id,
TO_CHAR(hire_date, 'MM/YY') AS 입사월
    FROM employees
    WHERE department_id = 100;


--예제 32) employees 테이블에서 salary가 10000달러가 넘는 사원들의 이름과 월급을 
--월급이 많은순으로 나타내어라. 
--(월급은 $ 형식/ 숫자 세 개단위에서 , / 소수점 둘째자리까지)
--TO_CHAR

SELECT
last_name AS 이름,
TO_CHAR(salary, '$99,999.99') AS 월급
    FROM employees
    WHERE salary >=10000
ORDER BY salary DESC;



--예제 33) employees 테이블에서 아래와 같이 
--이름, 월급(salary),
--커미션(commission_pct)를  NVL 함수사용해 표현(NULL일 경우 0), 
--연봉을 표시하라 ( 월급*12) + (월급*12*커미션)
----NVL

SELECT
last_name AS 이름,
salary AS 월급,
NVL(commission_pct,0) AS 커미션,
salary*12 + salary*12*NVL(commission_pct,0) AS 연봉
    FROM employees;

--예제34) 예제 33번에서 이어짐. 연봉계산은 NVL2 함수를 사용하여 커미션이 있을때와 없을때 계산방법을 나타내기
--(SAL or SAL+COMM)
---NVL2

SELECT
last_name AS 이름,
salary AS 월급,
NVL(commission_pct,0) AS 커미션,
salary*12 + salary*12*NVL(commission_pct,0) AS 연봉,
NVL2(commission_pct,'월급+커미션', '월급')
    FROM employees;

--예제 35) employees 테이블에서 
--first_name과 그 길이, last_name과 그 길이,
--first_name 과 last_name 의 길이 LENGTH를 비교해서 같으면 null 값을 아니면 LENGTH(first_name) 값을 출력하라.
----NULLIF

SELECT
first_name,
LENGTH(first_name),
last_name,
LENGTH(last_name),
NULLIF(LENGTH(first_name),LENGTH(last_name))
    FROM employees;



--예제 36) employees 테이블에서 DECODE 함수를 이용해서 월급에 따른 세율을 나타내세요.
--이름, job_id, 월급, 세율 출력.  
--세율은 기준범위마다 +10% --0.00~ 1,999.99 0% , 2,000.00~ 3,999.99 10%,.... 12,000.00 OR greater 는 50%
--DECODE or CASE

SELECT
last_name,
job_id,
salary,
DECODE (TRUNC(salary/2000), 0, 0,
                            1, 0.1,
                            2, 0.2,
                            3, 0.3,
                            4, 0.4,
                            0.5) AS 세율
    FROM employees;
    
SELECT
last_name,
job_id,
salary,
CASE TRUNC(salary/2000)
             WHEN 0 THEN 0
             WHEN 1 THEN 0.1
             WHEN 2 THEN 0.2
             WHEN 3 THEN 0.3
             WHEN 4 THEN 0.4
             ELSE        0.5
END AS 세율
    FROM employees;



--예제 37)employees 테이블에서 job_id가 IT_PROG라면 
--employee_id, first_name, last_name, salary를 출력하되 
--salary가 9000 이상이면 ‘상위급여’, 6000과 8999 사이면 ‘중위급여’, 그 외는 ‘하위급여’라고 출력하세요.

SELECT
employee_id, 
first_name, 
last_name, 
salary,
CASE  
     WHEN salary >= 9000 THEN'상위급여'
     WHEN salary >= 6000 THEN '중위급여'
     ELSE                     '하위급여' 
END AS 급여등급
    FROM employees
    WHERE job_id = 'IT_PROG';



--예제 38) department_id, 부서별 사원수, 최대급여, 최소급여, 급여합계, 평균급여를 
--급여합계 큰순으로 조회

SELECT
department_id  AS 부서번호,
COUNT(*) AS 사원수,
MAX(salary) AS 최대급여,
MIN(salary) AS 최소급여,
SUM(salary) AS 급여합계,
ROUND(AVG(salary)) AS 평균급여
    FROM employees
GROUP BY department_id
ORDER BY 급여합계 DESC;

--예제 39)부서별, 직업별(job_id), 상사번호(manager_id)별로 그룹을 지어 
--salary 합계와 그룹별 직원의 숫자를 출력하라.

SELECT
department_id AS 부서번호,
job_id AS 직무,
manager_id AS 상사번호,
SUM(salary) AS 급여합계,
COUNT(*) AS 직원수
    FROM employees
GROUP BY department_id, job_id, manager_id;


--예제 40) 부서별로 최고 월급을 뽑아서 평균을 내고, 최저월급 또한 평균을 내어 출력하라

SELECT
AVG(MAX(salary)) AS 부서별최고월급평균,
AVG(MIN(salary)) AS 부서별최저월급평균
    FROM employees
GROUP BY department_id;    


--예제 41) 아래 예제는 직종별 평균 월급이 $10000을 초과하는 직종에 대해서 
--job_id와  월급여 합계를 조회하는 예이다. 단 어카운트 매니저( AC_MGR )은 제외하고 
--월 급여 합계로 내림차순 정렬하시오.
---HAVING

SELECT
job_id AS 직무,
sum(salary) AS 월급여합계
    FROM employees
WHERE job_id != 'AC_MGR'
GROUP BY job_id
HAVING AVG(salary)>10000
ORDER BY 월급여합계 DESC;


--예제 42) 부서번호 40을 제외한 
--부서별 평균 급여가 7000 이하인 부서들의 평균 급여를 출력. department_id(부서번호), 평균급여

SELECT
department_id AS 부서번호,
ROUND(AVG(salary)) AS 평균급여
    FROM employees
WHERE department_id != 40
GROUP BY department_id
HAVING AVG(salary)<=7000;

--예제 43) 직종별로 월급(salary)의 합계가 13000 이상인 직종을 출력하라.  job_id, 급여총액
--급여총액으로 내림차순으로 정렬하고, 직종(job_id)에 'REP' 들어있는 직종은 제외한다.

SELECT
job_id,
SUM(salary) AS 급여총액
    FROM employees
WHERE job_id NOT LIKE '%REP%'
GROUP BY job_id
HAVING SUM(salary) >= 13000
ORDER BY 급여총액 DESC;
    

--44)부서명(department_name) , 시티명(city), 국가명(country_name)을 나타내는 테이블을 출력. 
--테이블들은 countries 와 departments와 locations를 조인 합니다. 
--조건은, 시티가 'Seattle' 혹은 'London' 이어야 하고 국가명은 앞쪽에 'United' 가 들어가야 합니다.
--동등조인(등가조인), 3개 이상 조인

SELECT 
department_name,
city,
country_name
FROM countries c
JOIN locations l
    ON c.country_id = l.country_id 
JOIN departments d
    ON l.location_id = d.location_id
WHERE l.city IN ('Seattle','London') 
      AND c.country_name LIKE 'United%';


--45)employees 테이블에서 자체조인해(manager_id, employee_id)
--직원명과 매니저명 출력

SELECT 
e.last_name AS 직원명,
m.last_name AS 매니저명
FROM employees e
JOIN employees m
    ON e.manager_id = m.employee_id
ORDER BY e.last_name;



-------------------https://dobbury.tistory.com/100---------------------------------------
---- 46) Steven King의 부서명(department_name)을 출력하라.
--동등조인(등가조인)

SELECT 
e.first_name, e.last_name, e.department_id,
d.department_name
FROM employees e
JOIN departments d
    ON d.department_id = e.department_id
WHERE e.first_name = 'Steven' AND e.last_name = 'King';

/*
SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.FIRST_NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
    AND E.LAST_NAME = 'King'
    AND E.FIRST_NAME = 'Steven';
*/


------47) IT부서에서 근무하고 있는 사람들을 출력하라. 성, 이름, job_id, department_name
--동등조인(등가조인)
SELECT 
e.first_name,
e.last_name,
e.job_id,
d.department_name
FROM employees e
JOIN departments d
    ON d.department_id = e.department_id
WHERE d.department_name = 'IT';

/*
SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.FIRST_NAME, E.JOB_ID,
    D.DEPARTMENT_NAME
FROM DEPARTMENTS D, EMPLOYEES E
WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID
    AND D.DEPARTMENT_NAME = 'IT'; 
*/


------48) EMPLOYEES 테이블과 DEPARTMENTS 테이블을 
-- Cartesian Product(모든 가능한 행들의 Join)하여 정보를 모두 출력하여라.
--교차조인(크로스조인)

SELECT *
FROM employees
CROSS JOIN departments;     

/*
SELECT *
FROM EMPLOYEES A, DEPARTMENTS B;
*/


---- 49) EMPLOYEES 테이블에서 사원번호,이름,업무, 
--DEPARTMENTS 테이블의 부서번호,부서명,근무지를 출력하여라.

SELECT
e.employee_id,
e.last_name,
e.job_id,
d.department_id,
d.department_name,
d.location_id
FROM employees e
JOIN departments d
    ON d.department_id = e.department_id;
    
----50) EMPLOYEES 테이블과 DEPARTMENTS 테이블의 부서번호를 조인하고
-- SA_MAN 사원만의 사원번호,이름,급여,부서명,근무지,직무명를 출력하라.
-- (Alias(사용별칭) 사용)


SELECT 
e.employee_id AS 사원번호,
e.last_name AS 이름,
e.salary AS 급여,
d.department_name AS 부서명,
d.location_id AS 근무지,
e.job_id AS 직무명
FROM employees e
JOIN departments d
    ON e.department_id = d.department_id
WHERE job_id = 'SA_MAN';

/*    
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.SALARY, D.DEPARTMENT_NAME, D.LOCATION_ID,
    E.JOB_ID
FROM EMPLOYEES E, DEPARTMENTS D 
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
    AND E.JOB_ID = 'SA_MAN';
*/


-- 51) EMPLOYEES 테이블에서 Self join하여 관리자(매니저)를 출력하여라.
SELECT
m.last_name AS 직원명,
e.last_name As 관리자명
FROM employees e
JOIN employees m
    ON e.employee_id = m.manager_id;



/*
SELECT A.LAST_NAME || '의 관리자는 ' || B.LAST_NAME || '입니다'
FROM EMPLOYEES A, EMPLOYEES B
WHERE A.MANAGER_ID = B.EMPLOYEE_ID;
*/



---- 52) EMPLOYEES 테이블에서 left join하여 관리자(매니저)를 출력하고
-- 매니저 아이디가 없는 사람은 배제하고 
-- 하향식으로 하며,    PRIOR
-- 급여는 역순으로     ORDER BY
-- 출력하라.

    

/*
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.MANAGER_ID, B.EMPLOYEE_ID,
    B.FIRST_NAME
FROM EMPLOYEES A, EMPLOYEES B
WHERE A.MANAGER_ID = B.EMPLOYEE_ID(+)
START WITH A.MANAGER_ID IS NOT NULL -- 매니저 아이디가 없는 사람은 배제
CONNECT BY A.manager_id = PRIOR A.EMPLOYEE_ID -- 하향식  
ORDER BY A.SALARY DESC;
*/




-- 53) EMPLOYEES 테이블에서 right join하여 
-- 관리자(매니저)가 108번
-- 상향식으로 
-- 급여는 역순으로 출력하라.




/*
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.MANAGER_ID, 
    B.EMPLOYEE_ID, B.FIRST_NAME
FROM EMPLOYEES A, EMPLOYEES B
WHERE A.MANAGER_ID = B.EMPLOYEE_ID
   AND A.MANAGER_ID = '108' 
CONNECT BY PRIOR A.MANAGER_ID = A.EMPLOYEE_ID
ORDER BY A.SALARY DESC;
*/

------------------------------------https://dobbury.tistory.com/100----------------------------------


--54) 사원 'Abel'(last_name) 보다 급여가 많은 사원의 last_name , salary 를 나타내어라.(서브쿼리 사용)
--서브쿼리, 단일행

SELECT last_name, salary
FROM employees
WHERE salary> (SELECT salary
               FROM employees
               WHERE last_name = 'Abel');


--55)'Bull'란 last_name을 가진 사원의 부서에서 Bull보다 높은 급여를 받는 사원들을 출력하라.  (서브쿼리 사용)
--직원번호, 이름, 부서번호, 급여
----서브쿼리, 단일행
                        
SELECT
employee_id, last_name, department_id, salary
FROM employees
WHERE department_id = (SELECT department_id
                       FROM employees
                       WHERE last_name = 'Bull')
        AND salary >  (SELECT salary
                       FROM employees
                       WHERE last_name= 'Bull');


--56)'Russell'이란 last_name의 직원번호를 manager_id로 가지는 직원들의 
--last_name, salary, manager_id를 출력하시오.

SELECT 
last_name,
salary,
manager_id
FROM employees
WHERE manager_id =(SELECT employee_id
                   FROM employees
                   WHERE last_name ='Russell');


--57) jobs 테이블에 job_title이 'Stock Manager' 의  job_id를 가진 직원들의 정보를 
--Employees 테이블에서 찾아서 출력하시오.

SELECT *
FROM employees
WHERE job_id = (SELECT job_id
                FROM jobs
                WHERE job_title = 'Stock Manager');


--58)부서번호(department_id)가  20번인 직원들의 매니저아이디(manager_id)와 같은 매니저를 가지는 직원들을 출력하라. 
--(단 20번 부서의 직원은 제외!). employee_id, first_name, job_id, salary
---서브쿼리, 다중행

SELECT
employee_id,
first_name,
job_id,
salary
FROM employees
WHERE manager_id IN (SELECT manager_id
                        FROM employees
                        WHERE department_id =20)
    AND department_id != 20;


--59) job_id가  'ST_MAN'인 직원들중 어느 한직원 보다도 급여가 작은  직원들을 출력하라. (ANY)
--employee_id, first_name, job_id, salary
--서브쿼리, 다중행, ANY

SELECT 
employee_id, first_name, job_id, salary
FROM employees
WHERE salary < ANY(SELECT salary
                    FROM employees
                    WHERE job_id ='ST_MAN');


--60)직책이 'IT_PROG' 인 직원들 보다 급여가 작은 직원들을 출력하시오.(ALL)
--employee_id, first_name, job_id, salary
--서브쿼리


SELECT
employee_id, first_name, job_id, salary
FROM employees
WHERE salary < ALL (SELECT salary
                    FROM employees
                    WHERE job_id = 'IT_PROG');
                    
        
--61) employees 테이블에서 job_id별로 가장 낮은 salary가 얼마인지 찾아보고, 
--찾아낸 job_id별 salary에 해당하는 직원의 first_name, job_id, salary, department_id 를 출력하시오. 
--(salary 내림차순 정렬)
--서브쿼리, 다중열

SELECT
first_name, job_id, salary, department_id
FROM employees
WHERE (job_id, salary) IN (SELECT job_id, MIN(salary)
                            FROM employees
                            GROUP BY job_id)
ORDER BY salary DESC;                
                                 
                            
 --62) employees 테이블의 department_id 집합과 departments 테이블의 department_id 집합을 
 --UNION 연산자를 이용해 합쳐 보세요.
 ---집합연산자, UNION
 
 SELECT department_id
 FROM employees
 UNION
 SELECT department_id
 FROM departments;
 
 --63) employees 테이블의 department_id 집합과 departments 테이블의 department_id 집합을 
 --UNION ALL연산자를 이용해 합쳐 보세요.
 
SELECT department_id
FROM employees
UNION ALL
SELECT department_id
FROM departments;
 
 
 --64) employees 테이블의 department_id 집합과 departments 테이블의 department_id 집합의 교집합을 출력해 보세요.
 --INTERSECT


SELECT department_id
FROM employees
INTERSECT
SELECT department_id
FROM departments;


 
 
 --67) departments 테이블의 department_id 집합에서 
 --employees 테이블의 department_id 집합을 MINUS 연산자를 이용해 빼 보세요.


SELECT department_id
FROM departments
MINUS
SELECT department_id
FROM employees;


--68) departments 테이블에 다음과 같이 각각의 department_id, department_name,
--manager_id가 200, location_id가 1700인 행을 3개 입력하세요. 
--기본키, 외래키 등 제약조건 체크. 데이터 타입 체크.

INSERT INTO departments(department_id, department_name, manager_id, location_id)
                   VALUES(27, 'sample2' ,200, 1700);

INSERT INTO departments(department_id, department_name, manager_id, location_id)
                   VALUES(28, 'sample3' ,200, 1700);

INSERT INTO departments(department_id, department_name, manager_id, location_id)
                   VALUES(29, 'sample4' ,200, 1700);

DELETE FROM departments
WHERE department_id BETWEEN 27 AND 29; --데이터 삭제



--69)테이블을 만든후  SELECT 문을 이용하여 
--departments 테이블 내용을 전부 입력하시오.


CREATE TABLE copy_that
AS select * from departments;

DROP TABLE copy_that; --테이블 삭제



--70) departments 테이블의 'Music' 부서의 매니저와 location ID 를 업데이트 해보자
--값은 100, 1800. Music 부서는 생성해야함

INSERT INTO departments (department_id, department_name)
                 VALUES (271, 'Music');

UPDATE departments
SET manager_id = 100, location_id = 1800
WHERE department_name = 'Music';



SELECT * FROM departments;

DELETE FROM departments
WHERE department_name = 'Music';
commit;


--예제 71) copy_departments 테이블에서(departments 테이블 복사해 생성)
--department_id 150부터 200까지 부서번호의 manager_ID 를 100으로 수정하라.

CREATE TABLE copy_departments
AS
SELECT * FROM departments;

UPDATE copy_departments
SET manager_id = 100
WHERE department_id BETWEEN 150 AND 200;


SELECT * FROM copy_departments;

DROP TABLE copy_departments;


--예제 72) product_id(number 타입), product_name(varchar2 타입, 20자리), 
--menu_date(date 타입) 열이 있는 sample_product 이름의 테이블을 생성해 보세요.

CREATE TABLE sample_product (
product_id NUMBER,
product_name VARCHAR2(20),
menu_date DATE
);

select * from sample_product;

--예제 73) 위에서 만든 테이블을 삭제해 보세요. DESCRIBE 절로 테이블이 잘 삭제되었는지 확인하세요.

DROP TABLE sample_product;
DESC sample_product;


--예제 74) members 라는 새 테이블을 만듭니다. (제약조건 이름은 생략가능)
--컬럼명/ 데이터타입/ 크기(byte)/제약조건
/*
member_id /NUMBER /2 /기본키
first_name/VARCHAR2 /50 /NULL 입력 불가
last_name/VARCHAR2 /50 /NULL 입력 불가
gender /VARCHAR2 /5 /값이  'Man'  또는 'Woman'
birth_day /DATE / / 디폴트값  SYSDATE
email /VARCHAR2 /200/유니크, NULL 입력불가
*/

CREATE TABLE members2(
member_id NUMBER(2) CONSTRAINT members_id_pk PRIMARY KEY,
first_name VARCHAR2(50) CONSTRAINT members_fn_nn NOT NULL,
last_name VARCHAR2(50) CONSTRAINT members_ln_nn NOT NULL,
gender VARCHAR2(5) CONSTRAINT members_gen_ck CHECK(gender IN ('Man', 'Woman')),
birth_day DATE DEFAULT SYSDATE,
email VARCHAR2(200) CONSTRAINT members_email_uq UNIQUE CONSTRAINT members_email_nn NOT NULL
);

DESC members2;

INSERT INTO members2 (member_id, first_name, last_name, gender, email)
                VALUES(1,'이','순신','Man','Hong@naver.com');

--예제 75) employees 테이블의 job_id 가 'ST_MAN' 인 직원들을 새 테이블 stmans 를 만들어 입력하라. 
--단 테이블의 컬럼 이름은  id , job , sal ( 직원 테이블의  employee_id, job_id, salary) 

CREATE TABLE stmans (id, job, sal)
AS
SELECT employee_id, job_id, salary
FROM employees
WHERE job_id = 'ST_MAN';

SELECT * FROM stmans;

DROP TABLE stmans;



--예제) MEMBERS 테이블의  first_name과 last_name의 멀티 인덱스를 만들어서 
--아래의 그림처럼 의  인덱스들의 조회및   성능평가 결과를 출력하라
--멀티 인덱스 생성, 이름의 첫글자가 A이면서 성의 첫글자가 M인 경우 검색.


/*
EXPLAIN PLAN FOR --테이블 검색 과정 설명이 만들어짐
SELECT * FROM members
WHERE 

--설명문을 화면에 출력
SELECT PLAN_TABLE_OUTPUT 
FROM TABLE(DBMS_XPLAN.DISPLAY());
*/

CREATE INDEX names_i
ON members(last_name, first_name);

EXPLAIN PLAN FOR
SELECT * FROM members
WHERE last_name LIKE 'A%' AND first_name LIKE 'M%';

SELECT PLAN_TABLE_OUTPUT
FROM TABLE(DBMS_XPLAN.DISPLAY());




--

/*
--오라클 11g hr계정 연습문제
 
--1. 직책(Job Title)이 Sales Manager인 사원들의 입사년도와 입사년도(hire_date)별 평균 급여를 출력하시오. 
--   출력 시 년도를 기준으로 오름차순 정렬하시오. 
SELECT 
       TO_CHAR(e.HIRE_DATE, 'YYYY') AS HIRE_DATE, AVG(e.salary) AS AVG
  FROM EMPLOYEES e, JOBS j
 WHERE e.JOB_ID = j.JOB_ID AND j.JOB_TITLE = 'Sales Manager' 
 GROUP BY TO_CHAR(e.HIRE_DATE,'YYYY')
 ORDER BY TO_CHAR(e.HIRE_DATE,'YYYY') ASC
;
 

--2. 각 도시(city)에 있는 모든 부서 직원들의 평균급여를 조회하고자 한다. 
--   평균급여가 가장 낮은 도시부터 도시명(city)과 평균연봉, 해당 도시의 직원수를 출력하시오. 
--   단, 도시에 근 무하는 직원이 10명 이상인 곳은 제외하고 조회하시오.
SELECT 
       l.CITY , AVG(e.SALARY) , COUNT(*)
  FROM EMPLOYEES e, LOCATIONS l, DEPARTMENTS d
 WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID AND d.LOCATION_ID = l.LOCATION_ID
 GROUP BY l.CITY
HAVING COUNT(*) < 10
 ORDER BY AVG(e.SALARY) ASC
;
  

--3. ‘Public  Accountant’의 직책(job_title)으로 과거에 근무한 적이 있는 모든 사원의 사번과 이름을 출력하시오. 
--   (현재 ‘Public Accountant’의 직책(job_title)으로 근무하는 사원은 고려 하지 않는다.)      
--   이름은 first_name, last_name을 아래의 실행결과와 같이 출력한다.
SELECT 
       e.EMPLOYEE_ID , CONCAT(CONCAT(e.FIRST_NAME,' '), e.LAST_NAME) 
  FROM EMPLOYEES e, JOBS j, JOB_HISTORY h
 WHERE j.JOB_TITLE = 'Public Accountant' AND h.JOB_ID = j.JOB_ID AND e.EMPLOYEE_ID = h.EMPLOYEE_ID
;
 

--4. 자신의 매니저보다 연봉(salary)를 많이 받는 직원들의 성(last_name)과 연봉(salary)를 출 력하시오. 
SELECT
       e.LAST_NAME, e.SALARY
  FROM EMPLOYEES e, EMPLOYEES m
 WHERE e.MANAGER_ID = m.EMPLOYEE_ID AND e.SALARY > m.SALARY   
;      
 

--5. 2007년에 입사(hire_date)한 직원들의 사번(employee_id), 이름(first_name), 성(last_name), 
--   부서명(department_name)을 조회합니다.  
--   이때, 부서에 배치되지 않은 직원의 경우, ‘<Not Assigned>’로 출력하시오. 
SELECT 
       e.EMPLOYEE_ID , e.LAST_NAME , e.FIRST_NAME , NVL(d.DEPARTMENT_NAME, '<Not Assigned>')
  FROM EMPLOYEES e
  LEFT JOIN DEPARTMENTS d
  ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
  WHERE TO_CHAR(e.HIRE_DATE, 'YYYY') = '2007'
  ORDER BY e.EMPLOYEE_ID ASC
;  

 
--6. 업무명(job_title)이 ‘Sales Representative’인 직원 중에서 연봉(salary)이 9,000이상, 10,000 이하인 
--   직원들의 이름(first_name), 성(last_name)과 연봉(salary)를 출력하시오
SELECT 
       e.FIRST_NAME, e.LAST_NAME, e.SALARY
  FROM EMPLOYEES e, JOBS j
  WHERE e.JOB_ID = j.JOB_ID AND e.SALARY BETWEEN 9000 AND 10000 AND j.JOB_TITLE = 'Sales Representative'
;
 

--7. 부서별로 가장 적은 급여를 받고 있는 직원의 이름, 부서이름, 급여를 출력하시오. 
--   이름은 last_name만 출력하며, 부서이름으로 오름차순 정렬하고, 
--   부서가 같은 경우 이름을 기준 으로 오름차순 정렬하여 출력합니다. 
SELECT 
       E.LAST_NAME, A.*
  FROM EMPLOYEES E, 
      (
      SELECT 
             d.DEPARTMENT_NAME, MIN(e.SALARY) AS MIN_SALARY
        FROM EMPLOYEES e, DEPARTMENTS d 
       WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID 
       GROUP BY d.DEPARTMENT_NAME
      ) A 
 WHERE E.SALARY = A.MIN_SALARY
 ORDER BY A.DEPARTMENT_NAME ASC, E.LAST_NAME ASC
;
 

--8. EMPLOYEES 테이블에서 급여를 많이 받는 순서대로 조회했을 때 결과처럼 6번째부터 10 번째까지 
--   5명의 last_name, first_name, salary를 조회하는 sql문장을 작성하시오.
SELECT 
       * 
  FROM
       (
       SELECT 
               RANK() OVER (ORDER BY TRUNC(SALARY, -1) DESC) AS RANKING, LAST_NAME, 
               FIRST_NAME, TRUNC(SALARY, -1) AS SALARY
          FROM EMPLOYEES 
         ORDER BY SALARY DESC
       )
  WHERE RANKING 
  BETWEEN 6 AND 10
 ;
 

--9. 사원의 부서가 속한 도시(city)가 ‘Seattle’인 사원의 이름, 해당 사원의 매니저 이름, 사원 의 부서이름을 출력하시오. 
--   이때 사원의 매니저가 없을 경우 ‘<없음>’이라고 출력하시오. 이름은 last_name만 출력하며, 
--   사원의 이름을 오름차순으로 정렬하시오. 
SELECT 
       E.E_NAME, NVL(E.M_NAME, '<없음>'), D.DEPARTMENT_NAME
  FROM 
      (
       SELECT 
              A.LAST_NAME AS E_NAME, B.LAST_NAME AS M_NAME, A.DEPARTMENT_ID 
         FROM EMPLOYEES A 
         LEFT JOIN EMPLOYEES B 
           ON A.MANAGER_ID = B.EMPLOYEE_ID
      ) E, DEPARTMENTS D, LOCATIONS L
 WHERE L.CITY = 'Seattle' AND E.DEPARTMENT_ID = D.DEPARTMENT_ID AND D.LOCATION_ID = L.LOCATION_ID
 ORDER BY E.E_NAME ASC
;  

 
--10. 각 업무(job) 별로 연봉(salary)의 총합을 구하고자 한다. 연봉 총합이 가장 높은 업무부터 
--    업무명(job_title)과 연봉 총합을 조회하시오. 단 연봉총합이 30,000보다 큰 업무만 출력하시오. 
SELECT J.JOB_TITLE, SUM(E.SALARY)
  FROM JOBS J, EMPLOYEES E
 WHERE E.JOB_ID = J.JOB_ID
 GROUP BY J.JOB_TITLE
 HAVING SUM(E.SALARY) > 30000
 ORDER BY SUM(E.SALARY) DESC
;
 

--11. 각 사원(employee)에 대해서 사번(employee_id), 이름(first_name), 업무명(job_title), 
--    부서 명(department_name)을 조회하시오. 
--    단 도시명(city)이 ‘Seattle’인 지역(location)의 부서 (department)에 근무하는 직원을 사원번호 오름차순순으로 출력하시오.
SELECT 
       E.EMPLOYEE_ID, E.FIRST_NAME, J.JOB_TITLE, D.DEPARTMENT_NAME
  FROM EMPLOYEES E, DEPARTMENTS D, LOCATIONS L, JOBS J
 WHERE L.CITY = 'Seattle' AND J.JOB_ID = E.JOB_ID AND E.DEPARTMENT_ID = D.DEPARTMENT_ID 
       AND D.LOCATION_ID = L.LOCATION_ID
 ORDER BY E.EMPLOYEE_ID ASC
;
 

--12. 2001~20003년사이에 입사한 직원의 이름(first_name), 입사일(hire_date), 관리자사번 (employee_id), 
--    관리자 이름(fist_name)을 조회합니다. 단, 관리자가 없는 사원정보도 출력 결과에 포함시켜 출력한다.
SELECT 
       E.FIRST_NAME, TO_CHAR(E.HIRE_DATE, 'YYYY-MM-DD AM HH12:MI:SS') AS HIRE_DATE, E.MANAGER_ID, M.FIRST_NAME
  FROM EMPLOYEES E LEFT JOIN EMPLOYEES M ON
  E.MANAGER_ID = M.EMPLOYEE_ID WHERE TO_CHAR(E.HIRE_DATE, 'YYYY') BETWEEN '2001' AND '2003'
;
 

--13. ‘Sales’ 부서에 속한 직원의 이름(first_name), 급여(salary), 부서이름(department_name)을 조회하시오. 
--    단, 급여는 100번 부서의 평균보다 적게 받는 직원 정보만 출력되어야 한다. 
SELECT 
        E.FIRST_NAME, E.SALARY, D.DEPARTMENT_NAME 
  FROM EMPLOYEES E, DEPARTMENTS D
 WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID AND D.DEPARTMENT_NAME = 'Sales'
   AND E.SALARY < (
                   SELECT 
                          AVG(SALARY) 
                     FROM EMPLOYEES 
                    WHERE DEPARTMENT_ID = 100
                  )
; 
 

--14. Employees 테이블에서 입사한달(hire_date)별로 인원수를 조회하시오.
SELECT 
       CONCAT(TO_CHAR(E.HIRE_DATE, 'MM'), '월') AS HIRE_DATE, COUNT(*)
  FROM EMPLOYEES E
  GROUP BY TO_CHAR(E.HIRE_DATE, 'MM')
  ORDER BY TO_CHAR(E.HIRE_DATE, 'MM') ASC
;  
  

--15. 부서별 직원들의 최대, 최소, 평균급여를 조회하되, 
--    평균급여가 ‘IT’ 부서의 평균급여보다 많고, ‘Sales’ 부서의 평균보다 적은 부서 정보만 출력하시오. 
SELECT 
       D.DEPARTMENT_NAME, MAX(E.SALARY), MIN(E.SALARY), TRUNC(AVG(E.SALARY), 0)
  FROM EMPLOYEES E, DEPARTMENTS D
 WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
 GROUP BY D.DEPARTMENT_NAME
HAVING TRUNC(AVG(E.SALARY), 0) > (
                                  SELECT 
                                         TRUNC(AVG(E.SALARY), 0)
                                    FROM EMPLOYEES E, DEPARTMENTS D
                                   WHERE D.DEPARTMENT_NAME = 'IT' AND D.DEPARTMENT_ID = E.DEPARTMENT_ID
                                   )
   AND  TRUNC(AVG(E.SALARY), 0) < (
                                   SELECT 
                                          TRUNC(AVG(E.SALARY), 0)
                                     FROM EMPLOYEES E, DEPARTMENTS D
                                    WHERE D.DEPARTMENT_NAME = 'Sales' AND D.DEPARTMENT_ID = E.DEPARTMENT_ID)
;

 
--16. 각 부서별로 직원이 한명만 있는 부서만 조회하시오. 
--    단, 직원이 없는 부서에 대해서는 ‘<신생부서>’라는 문자열이 출력되도록 하고,
--    출력결과는 다음과 같이 부서명이 내림차순 으로 정렬되어야한다. 
SELECT 
       NVL(D.DEPARTMENT_NAME, '<신생부서>') AS DEPARTMENT_NAME , COUNT(*)
  FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D
  ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
 GROUP BY D.DEPARTMENT_NAME
HAVING COUNT(*) = 1
 ORDER BY D.DEPARTMENT_NAME DESC
;
 

--17. 부서별 입사월별 직원수를 출력하시오. 
--    단, 직원수가 5명 이상인 부서만 출력되어야 하며 출력결과는 부서이름 순으로 한다.
SELECT 
       D.DEPARTMENT_NAME, TO_CHAR(E.HIRE_DATE, 'MON', 'NLS_DATE_LANGUAGE=ENGLISH') AS HIRE_DATE, COUNT(*)
  FROM DEPARTMENTS D, EMPLOYEES E
 WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID 
 GROUP BY D.DEPARTMENT_NAME, TO_CHAR(E.HIRE_DATE, 'MON', 'NLS_DATE_LANGUAGE=ENGLISH')
HAVING COUNT (*) >= 5
 ORDER BY D.DEPARTMENT_NAME ASC;
 

--18. 국가(country_name) 별 도시(city)별 직원수를 조회하시오. 
--    단, 부서에 속해있지 않은 직원 이 있기 때문에 106명의 직원만 출력이 된다. 
--    부서정보가 없는 직원은 국가명과 도시명 대신에 ‘<부서없음>’이 출력되도록 하여 107명 모두 출력되게 한다.
SELECT 
       NVL(C.COUNTRY_NAME, '<부서없음>') AS COUNTRY_NAME, NVL(L.CITY, '<부서없음>') AS CITY, COUNT(*)
  FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
                   LEFT JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
                   LEFT JOIN COUNTRIES C ON L.COUNTRY_ID = C.COUNTRY_ID 
 GROUP BY COUNTRY_NAME, CITY
 ORDER BY COUNTRY_NAME ASC, CITY ASC
;  

 
--19. 각 부서별 최대 급여자의 아이디(employee_id), 이름(first_name), 급여(salary)를 출력하시오. 
--    단, 최대 급여자가 속한 부서의 평균급여를 마지막으로 출력하여 평균급여와 비교할 수 있게 할 것.
SELECT 
       E.EMPLOYEE_ID, E.FIRST_NAME, A.SALARY, A.AVG
  FROM 
       EMPLOYEES E, (
                      SELECT 
                             E.DEPARTMENT_ID, MAX(E.SALARY) AS SALARY, TRUNC(AVG(E.SALARY),2) AS AVG
                        FROM 
                             EMPLOYEES E, DEPARTMENTS D
                       WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
                       GROUP BY E.DEPARTMENT_ID
                    ) A
 WHERE E.SALARY = A.SALARY AND E.DEPARTMENT_ID = A.DEPARTMENT_ID
 ORDER BY E.EMPLOYEE_ID ASC
;
 

--20. 커미션(commission_pct)별 직원수를 조회하시오. 
--    커미션은 아래실행결과처럼 0.2, 0.25는 모두 .2로, 0.3, 0.35는 .3 형태로 출력되어야 한다. 
--    단, 커미션 정보가 없는 직원들도 있는 데 커미션이 없는 직원 그룹은 ‘<커미션 없음>’이 출력되게 한다.
SELECT 
       NVL(TO_CHAR(TRUNC(E.COMMISSION_PCT,1)), '<커미션없음>') AS COMMISSION, COUNT(*)
  FROM 
       EMPLOYEES E 
 GROUP BY NVL(TO_CHAR(TRUNC(E.COMMISSION_PCT,1)), '<커미션없음>')
 ORDER BY NVL(TO_CHAR(TRUNC(E.COMMISSION_PCT,1)), '<커미션없음>') DESC
;
 

--21. 커미션(commission_pct)을 가장 많이 받은 상위 4명의 부서명(department_name), 
--    직원명 (first_name), 급여(salary), 커미션(commission_pct) 정보를 조회하시오. 
--    출력결과는 커미션 을 많이 받는 순서로 출력하되 동일한 커미션에 대해서는 급여가 높은 직원이 먼저 출력 되게 한다.
SELECT 
       * 
  FROM
       (
        SELECT 
               D.DEPARTMENT_NAME, E.FIRST_NAME, E.SALARY, E.COMMISSION_PCT
          FROM 
               EMPLOYEES E, DEPARTMENTS D
         WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
         ORDER BY E.COMMISSION_PCT DESC NULLS LAST, E.SALARY DESC
       )
 WHERE ROWNUM <= 4
;

*/

/*
-- 기본 함수 실습 과제
-- 문제1) EMPLOYEES 테이블에서 King의 정보를 소문자로 검색하고 
-- 사원번호, 성명, 담당업무(소문자로),부서번호를 출력하라.
SELECT EMPLOYEE_ID, LAST_NAME, LOWER(JOB_ID), DEPARTMENT_ID    
FROM EMPLOYEES
WHERE LOWER(LAST_NAME) = 'king';
 
-- 문제2) EMPLOYEES 테이블에서 King의 정보를 대문자로 검색하고 
-- 사원번호, 성명, 담당업무(대문자로),부서번호를 출력하라.
SELECT employee_id, LAST_NAME, UPPER(JOB_ID), DEPARTMENT_ID    
FROM EMPLOYEES
WHERE UPPER(LAST_NAME) = 'KING';
 
-- 문제3) DEPARTMENTS 테이블에서 부서번호와 부서이름, 부서이름과 
-- 위치번호를 합하여 출력하도록 하라.
SELECT DEPARTMENT_ID, DEPARTMENT_NAME,
    DEPARTMENT_NAME || '' || LOCATION_ID
FROM DEPARTMENTS;
 
SELECT CONCAT(DEPARTMENT_ID, DEPARTMENT_NAME),
    CONCAT(DEPARTMENT_NAME, LOCATION_ID)
FROM DEPARTMENTS;
 
-- 문제4) EMPLOYEES 테이블에서 이름의 첫 글자가 
-- ‘K’ 보다 크고 ‘Y’보다 적은 사원의 정보를 
-- 사원번호, 이름, 업무, 급여, 부서번호를 출력하라. 
-- 단 이름순으로 정렬하여라.
SELECT EMPLOYEE_ID, LAST_NAME, JOB_ID, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SUBSTR(LAST_NAME, 1, 1) > 'K'
    AND SUBSTR(LAST_NAME, 1, 1) < 'Y'
ORDER BY LAST_NAME;
 
-- 문제5) EMPLOYEES 테이블에서 20번 부서 중 
-- 이름의 길이 및 급여의 자릿수를 
-- 사원번호, 이름, 이름의 자릿수, 급여, 급여의 자릿수를 출력하라.
SELECT EMPLOYEE_ID, LAST_NAME, LENGTH(LAST_NAME), SALARY, LENGTH(SALARY)        
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20;
 
-- 문제6) EMPLOYEES 테이블에서 이름 중 ‘e’자의 위치를 출력하라.
SELECT LAST_NAME, INSTR(LAST_NAME, 'e', 1, 1)
FROM EMPLOYEES;
 
-- 문제7) 다음의 쿼리를 실행하고 결과를 분석하라.
SELECT ROUND(4567.678), ROUND(4567.678,0), ROUND(4567.678, 2),
    ROUND(4567.678,-2)
FROM dual;
 
-- 문제8) EMPLOYEES 테이블에서 부서번호가 80인 사람의 급여를 
-- 30으로 나눈 나머지를 구하여 출력하라.
SELECT LAST_NAME, SALARY, MOD(SALARY, 30), DEPARTMENT_ID    
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 80;
 
 
-- 문제9) EMPLOYEES 테이블에서 30번 부서 중 
-- 이름과 담당 업무를 연결하여 출력하여라. 
-- 단 담당 업무를 한 줄 아래로 출력하라.
SELECT LAST_NAME || CHR(10) || JOB_ID    
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 30;
 
-- 문제10) EMPLOYEES 테이블에서 
-- 현재까지 근무일 수가 몇주 몇일 인가를 출력하여라. 
-- 단 근무 일수가 많은 사람 순으로 출력하여라.
SELECT LAST_NAME, HIRE_DATE, SYSDATE, 
    TRUNC(SYSDATE - HIRE_DATE) AS "총 근무일수",
    TRUNC((SYSDATE - HIRE_DATE)/7) AS "총 근무주일수",
    ROUND(MOD(SYSDATE - HIRE_DATE, 7), 0) AS "남은 날수"
FROM EMPLOYEES
ORDER BY (SYSDATE - HIRE_DATE) DESC;
 
-- 문제11) EMPLOYEES 테이블에서 부서 50에서 
-- 급여 앞에 $를 삽입하고 3자리마다 ,를 출력하라
SELECT DEPARTMENT_ID, LAST_NAME, TO_CHAR(SALARY, '$999,999')
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50;
 
-- 문제12) 다음의 결과를 분석하여 보아라.
SELECT EMPLOYEE_ID,LAST_NAME, JOB_ID,SALARY,
    DECODE(JOB_ID,
        'IT_PROG', SALARY*1.1,
        'ST_MAN', SALARY*1.15,
        'SA_MAN', SALARY*1.2, SALARY) d_sal
FROM EMPLOYEES
WHERE JOB_ID IN('IT_PROG', 'ST_MAN', 'SA_MAN')
ORDER BY SALARY DESC;
 
-- 그룹 함수 실습 과제
-- 문제1) EMPLOYEES 테이블에서 모든 SALESMAN(SA_)에 대하여 
-- 급여의 평균, 최고액, 최저액, 합계를 구하여 출력하여라.
SELECT AVG(SALARY), MAX(SALARY), MIN(SALARY), SUM(SALARY)    
FROM EMPLOYEES
WHERE JOB_ID LIKE 'SA_%';
 
-- 문제2) EMPLOYEES 테이블에 등록되어 있는 
-- 인원수, 보너스가 NULL이 아닌 
-- 인원수, 보너스의 평균, 등록되어 있는 부서의 수를 구하여 출력하라.
SELECT COUNT(*), COUNT(COMMISSION_PCT),
    TRUNC(AVG(COMMISSION_PCT * SALARY)),
    COUNT(DISTINCT DEPARTMENT_ID)
FROM EMPLOYEES;
 
-- 문제3) EMPLOYEES 테이블에서 부서별로 
-- 인원수, 평균 급여, 최저급여, 최고 급여, 급여의 합을 구하여 출력하라.
SELECT DEPARTMENT_ID, COUNT(DEPARTMENT_ID), TRUNC(AVG(SALARY)),
    MIN(SALARY), MAX(SALARY), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;
 
-- 문제4) EMPLOYEES 테이블에서 각 부서별로 
-- 인원수,급여의 평균, 최저 급여, 최고 급여, 급여의 합을 구하여 
-- 급여의 합이 많은 순으로 출력하여라.
SELECT DEPARTMENT_ID, COUNT(DEPARTMENT_ID), TRUNC(AVG(SALARY)),
    MIN(SALARY), MAX(SALARY), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY SUM(SALARY) DESC;
 
-- 문제5) EMPLOYEES 테이블에서 부서별, 업무별 그룹하여 결과를 
-- 부서번호, 업무, 인원수, 급여의 평균, 급여의 합을 구하여 출력하여라.
SELECT  DEPARTMENT_ID, JOB_ID, COUNT(*), AVG(SALARY), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID;
 
-- 문제6) EMPLOYEES 테이블에서 부서 인원이 4명보다 많은 부서의 
-- 부서번호, 인원수, 급여의 합을 구하여 출력하여라
SELECT DEPARTMENT_ID, COUNT(*), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) > 4;
 
-- 문제7) EMPLOYEES 테이블에서 급여가 최대 10000이상인 부서에 대해서 
-- 부서번호, 평균 급여, 급여의 합을 구하여 출력하여라.
SELECT DEPARTMENT_ID, ROUND(AVG(SALARY)), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING MAX(SALARY) >= 10000; 
 
-- 문제8) EMPLOYEES 테이블에서 업무별 
-- 급여의 평균이 10000 이상인 업무에 대해서 
-- 업무명,평균 급여, 급여의 합을 구하여 출력하라.
SELECT JOB_ID, COUNT(*), AVG(SALARY), SUM(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID
HAVING AVG(SALARY) >= 10000;

*/

/*

2. 'DALLAS'에서(LOC) 근무하는 사원의 이름, 직위, 부서번호, 부서이름을 출력하세요.



(결과물)





3. 이름에 'A'가 들어가는 사원들의 이름과 부서이름을 출력하세요.



(결과물)





4. 사원이름과 그 사원이 속한 부서의 부서명, 그리고 월급을 출력하는데 월급이 3000이상인 사원을 출력하세요.



(결과물)





5. 직위가 'SALESMAN'인 사원들의 직위, 사원이름, 그 사원이 속한 부서 이름을 출력하세요.



(결과물)





6. 커미션이 책정된 사원들의 사원번호, 이름, 연봉, 연봉+커미션, 급여등급을 출력하되, 각 각의 컬럼명을 '사원번호',  '사원이름', '연봉', '실급여', '급여등급'으로 하여 출력하세요.



(결과물)





7. 부서번호가 10번인 사원들의 부서번호, 부서이름, 사원이름, 월급, 급여등급을 출력하세요.



(결과물)





8. 부서번호가 10번, 20번인 사원들의 부서번호, 부서이름, 사원이름, 월급, 급여등급을 출력하고 출력된 결과물을 부서번호가 낮은 순으로, 월급이 높은 순으로 정렬하세요.



(결과물)





9. 사원번호와 사원이름, 그리고 그 사원을 관리하는 관리자의 사원번호와 사원이름을 출력하되 각각의 컬럼명을 '사원번호', '사원이름', '관리자번호', '관리자이름'으로 하여 출력하세요. 

*/


/*
-- 기본 함수 실습 과제
-- 문제1) EMPLOYEES 테이블에서 King의 정보를 소문자로 검색하고 
-- 사원번호, 성명, 담당업무(소문자로),부서번호를 출력하라.
SELECT EMPLOYEE_ID, LAST_NAME, LOWER(JOB_ID), DEPARTMENT_ID    
FROM EMPLOYEES
WHERE LOWER(LAST_NAME) = 'king';
 
-- 문제2) EMPLOYEES 테이블에서 King의 정보를 대문자로 검색하고 
-- 사원번호, 성명, 담당업무(대문자로),부서번호를 출력하라.
SELECT employee_id, LAST_NAME, UPPER(JOB_ID), DEPARTMENT_ID    
FROM EMPLOYEES
WHERE UPPER(LAST_NAME) = 'KING';
 
-- 문제3) DEPARTMENTS 테이블에서 부서번호와 부서이름, 부서이름과 
-- 위치번호를 합하여 출력하도록 하라.
SELECT DEPARTMENT_ID, DEPARTMENT_NAME,
    DEPARTMENT_NAME || '' || LOCATION_ID
FROM DEPARTMENTS;
 
SELECT CONCAT(DEPARTMENT_ID, DEPARTMENT_NAME),
    CONCAT(DEPARTMENT_NAME, LOCATION_ID)
FROM DEPARTMENTS;
 
-- 문제4) EMPLOYEES 테이블에서 이름의 첫 글자가 
-- ‘K’ 보다 크고 ‘Y’보다 적은 사원의 정보를 
-- 사원번호, 이름, 업무, 급여, 부서번호를 출력하라. 
-- 단 이름순으로 정렬하여라.
SELECT EMPLOYEE_ID, LAST_NAME, JOB_ID, SALARY, DEPARTMENT_ID
FROM EMPLOYEES
WHERE SUBSTR(LAST_NAME, 1, 1) > 'K'
    AND SUBSTR(LAST_NAME, 1, 1) < 'Y'
ORDER BY LAST_NAME;
 
-- 문제5) EMPLOYEES 테이블에서 20번 부서 중 
-- 이름의 길이 및 급여의 자릿수를 
-- 사원번호, 이름, 이름의 자릿수, 급여, 급여의 자릿수를 출력하라.
SELECT EMPLOYEE_ID, LAST_NAME, LENGTH(LAST_NAME), SALARY, LENGTH(SALARY)        
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 20;
 
-- 문제6) EMPLOYEES 테이블에서 이름 중 ‘e’자의 위치를 출력하라.
SELECT LAST_NAME, INSTR(LAST_NAME, 'e', 1, 1)
FROM EMPLOYEES;
 
-- 문제7) 다음의 쿼리를 실행하고 결과를 분석하라.
SELECT ROUND(4567.678), ROUND(4567.678,0), ROUND(4567.678, 2),
    ROUND(4567.678,-2)
FROM dual;
 
-- 문제8) EMPLOYEES 테이블에서 부서번호가 80인 사람의 급여를 
-- 30으로 나눈 나머지를 구하여 출력하라.
SELECT LAST_NAME, SALARY, MOD(SALARY, 30), DEPARTMENT_ID    
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 80;
 
 
-- 문제9) EMPLOYEES 테이블에서 30번 부서 중 
-- 이름과 담당 업무를 연결하여 출력하여라. 
-- 단 담당 업무를 한 줄 아래로 출력하라.
SELECT LAST_NAME || CHR(10) || JOB_ID    
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 30;
 
-- 문제10) EMPLOYEES 테이블에서 
-- 현재까지 근무일 수가 몇주 몇일 인가를 출력하여라. 
-- 단 근무 일수가 많은 사람 순으로 출력하여라.
SELECT LAST_NAME, HIRE_DATE, SYSDATE, 
    TRUNC(SYSDATE - HIRE_DATE) AS "총 근무일수",
    TRUNC((SYSDATE - HIRE_DATE)/7) AS "총 근무주일수",
    ROUND(MOD(SYSDATE - HIRE_DATE, 7), 0) AS "남은 날수"
FROM EMPLOYEES
ORDER BY (SYSDATE - HIRE_DATE) DESC;
 
-- 문제11) EMPLOYEES 테이블에서 부서 50에서 
-- 급여 앞에 $를 삽입하고 3자리마다 ,를 출력하라
SELECT DEPARTMENT_ID, LAST_NAME, TO_CHAR(SALARY, '$999,999')
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 50;
 
-- 문제12) 다음의 결과를 분석하여 보아라.
SELECT EMPLOYEE_ID,LAST_NAME, JOB_ID,SALARY,
    DECODE(JOB_ID,
        'IT_PROG', SALARY*1.1,
        'ST_MAN', SALARY*1.15,
        'SA_MAN', SALARY*1.2, SALARY) d_sal
FROM EMPLOYEES
WHERE JOB_ID IN('IT_PROG', 'ST_MAN', 'SA_MAN')
ORDER BY SALARY DESC;
 
-- 그룹 함수 실습 과제
-- 문제1) EMPLOYEES 테이블에서 모든 SALESMAN(SA_)에 대하여 
-- 급여의 평균, 최고액, 최저액, 합계를 구하여 출력하여라.
SELECT AVG(SALARY), MAX(SALARY), MIN(SALARY), SUM(SALARY)    
FROM EMPLOYEES
WHERE JOB_ID LIKE 'SA_%';
 
-- 문제2) EMPLOYEES 테이블에 등록되어 있는 
-- 인원수, 보너스가 NULL이 아닌 
-- 인원수, 보너스의 평균, 등록되어 있는 부서의 수를 구하여 출력하라.
SELECT COUNT(*), COUNT(COMMISSION_PCT),
    TRUNC(AVG(COMMISSION_PCT * SALARY)),
    COUNT(DISTINCT DEPARTMENT_ID)
FROM EMPLOYEES;
 
-- 문제3) EMPLOYEES 테이블에서 부서별로 
-- 인원수, 평균 급여, 최저급여, 최고 급여, 급여의 합을 구하여 출력하라.
SELECT DEPARTMENT_ID, COUNT(DEPARTMENT_ID), TRUNC(AVG(SALARY)),
    MIN(SALARY), MAX(SALARY), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;
 
-- 문제4) EMPLOYEES 테이블에서 각 부서별로 
-- 인원수,급여의 평균, 최저 급여, 최고 급여, 급여의 합을 구하여 
-- 급여의 합이 많은 순으로 출력하여라.
SELECT DEPARTMENT_ID, COUNT(DEPARTMENT_ID), TRUNC(AVG(SALARY)),
    MIN(SALARY), MAX(SALARY), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY SUM(SALARY) DESC;
 
-- 문제5) EMPLOYEES 테이블에서 부서별, 업무별 그룹하여 결과를 
-- 부서번호, 업무, 인원수, 급여의 평균, 급여의 합을 구하여 출력하여라.
SELECT  DEPARTMENT_ID, JOB_ID, COUNT(*), AVG(SALARY), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID;
 
-- 문제6) EMPLOYEES 테이블에서 부서 인원이 4명보다 많은 부서의 
-- 부서번호, 인원수, 급여의 합을 구하여 출력하여라
SELECT DEPARTMENT_ID, COUNT(*), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) > 4;
 
-- 문제7) EMPLOYEES 테이블에서 급여가 최대 10000이상인 부서에 대해서 
-- 부서번호, 평균 급여, 급여의 합을 구하여 출력하여라.
SELECT DEPARTMENT_ID, ROUND(AVG(SALARY)), SUM(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING MAX(SALARY) >= 10000; 
 
-- 문제8) EMPLOYEES 테이블에서 업무별 
-- 급여의 평균이 10000 이상인 업무에 대해서 
-- 업무명,평균 급여, 급여의 합을 구하여 출력하라.
SELECT JOB_ID, COUNT(*), AVG(SALARY), SUM(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID
HAVING AVG(SALARY) >= 10000;
*/

