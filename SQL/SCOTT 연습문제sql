--1. 문제) 부서번호가 10번인 부서의 사람 중 사원번호, 이름, 월급을 출력하라

SELECT empno, ename, sal
    FROM emp
    WHERE deptno = 10;

--2. 문제) 사원번호가 7369인 사람 중 이름, 입사일, 부서번호를 출력하라

SELECT
ename,
hiredate,
deptno
    FROM emp
    WHERE empno = 7369;
    
--3. 문제) 이름이 ALLEN인 사람의 모든 정보를 출력하라.
SELECT *
    FROM emp
    WHERE ename = 'ALLEN';

--4. 문제) 입사일이 81/02/20인 사원의 이름, 부서번호, 월급을 출력하라.

SELECT
ename,
deptno,
sal
    FROM emp
    WHERE hiredate = '81/02/20';


--5. 문제) 직업이 MANAGER가 아닌 사람의 모든 정보를 출력하라.

SELECT *
    FROM emp
    WHERE job != 'MANAGER';

--6. 문제) 입사일이 81/04/02 이후에 입사한 사원의 정보를 출력하라.

SELECT *
    FROM emp
    WHERE hiredate > '81/04/02';

--7. 문제) 급여가 $800 이상인 사람의 이름, 급여, 부서번호를 출력하라.

SELECT 
ename,
sal,
deptno
    FROM emp
    WHERE sal >= 800;
    
 
 --8. 문제) 부서번호가 20번 이상인 사원의 모든 정보를 출력하라.  
 
 SELECT *
    FROM emp
    WHERE deptno >=20;

--9. 문제) 이름이 K로 시작하는 사람보다 높은 이름을 가진 사람의 모든 정보를 출력하라.
--(문자열 비교시 알파벳순으로 철자 비교 예 'B'>'A')

SELECT *
    FROM emp 
    WHERE ename > 'K';


--10. 문제) 입사일이 81/12/09 보다 먼저 입사한 사람들의 모든 정보를 출력하라.

SELECT *
    FROM emp
    WHERE hiredate < '81/12/09';

--11. 문제) 직원번호가 7698보다 작거나 같은 사람들의 직원번호와 이름을 출력하라.

SELECT
empno,
ename
    FROM emp
    WHERE empno <= 7698;

--12. 문제) 입사일이 81/04/02 보다 같거나 늦고 82/12/09 보다 같거나 빠른 사원의 이름,월급, 부서번호를 출력하라.

SELECT
ename,
sal,
deptno
    FROM emp
    WHERE hiredate >= '81/04/02' AND hiredate <= '82/12/09';

SELECT
ename,
sal,
deptno
    FROM emp
    WHERE hiredate BETWEEN '81/04/02' AND '82/12/09';
    
--13. 문제) 급여가 $1,600보다 크고 $3,000보다 작은 직원의 이름, 직업, 급여를 출력하라.

SELECT 
ename,
job,
sal
    FROM emp
    WHERE sal BETWEEN 1601 AND 2999;

SELECT 
ename,
job,
sal
    FROM emp
    WHERE sal> 1600 AND sal <3000;

--14. 문제) 직원번호가 7654와 7782 사이 이외의 직원의 모든 정보를 출력하라. 

SELECT *
    FROM emp
    WHERE empno NOT BETWEEN 7654 AND 7782;

--15. 문제) 이름이 B와 J 사이의 모든 직원의 정보를 출력하라.


SELECT *
    FROM emp
    WHERE ename BETWEEN 'B' AND 'J';
    
--16. 문제) 입사일이 81년 이외에 입사한 직원의 모든 정보를 출력하라.

SELECT *
    FROM emp
    WHERE hiredate NOT LIKE '81%';
    
SELECT *
    FROM emp
    WHERE hiredate NOT BETWEEN '81/01/01' AND '81/12/31';
    
SELECT *
    FROM emp
    WHERE TO_CHAR(hiredate,'YYYY')!= '1981';
    
--17. 문제) 직업이 MANAGER이거나 SALESMAN인 직원의 모든 정보를 출력하라.

SELECT *
    FROM emp
    WHERE job IN ('MANAGER', 'SALESMAN');
    
--18. 문제) 부서번호가 20, 30번을 제외한 모든 직원의 이름, 사원번호, 부서번호를 출력하라.

SELECT
ename,
empno,
deptno
    FROM emp
    WHERE deptno NOT IN (20, 30);
 
--19. 문제) 이름이 S로 시작하는 직원원의 사원번호, 이름, 입사일, 부서번호를 출력하라.

SELECT
empno,
ename,
hiredate,
deptno
    FROM emp
    WHERE ename LIKE 'S%';

--20. 문제) 입사일이 81년도인 사람의 모든 정보를 출력하라

SELECT *
    FROM emp
    WHERE hiredate LIKE '81%';

SELECT *
    FROM emp
    WHERE hiredate BETWEEN '1981/01/01' AND '1981/12/31';

SELECT *
    FROM emp
    WHERE TO_CHAR(hiredate,'YYYY')= '1981';
 
--21. 문제) 이름 중 S자가 들어가 있는 사람만 모든 정보를 출력하라.

SELECT *
    FROM emp
    WHERE ename LIKE '%S%';
 
--22. 문제) 이름이 M로 시작하고 마지막 글자가 N인 사람의 모든 정보를 출력하라
--(단, 이름은 전체 6자리이다. 자리수를 이용한 와일드카드 '_' 을 이용) 

SELECT *
    FROM emp
    WHERE ename LIKE 'M____N';

--23. 문제) 이름이 첫 번째 문자는 관계없고, 두 번째 문자가 A인 사람의 정보를 출력하라.

SELECT *
    FROM emp
    WHERE ename LIKE '_A%';

--24. 문제) 커미션이 NULL인 사람의 정보를 출력하라.  ( IS NULL 또는 IS NOT NULL 사용) 

SELECT *
    FROM emp
    WHERE comm IS NULL;

--25. 문제) 커미션이 NULL이 아닌 사람의 모든 정보를 출력하라. ( IS NULL 또는 IS NOT NULL 사용) 

SELECT *
    FROM emp
    WHERE comm IS NOT NULL;
    
--26. 문제) 부서가 30번 부서이고 급여가 $1,500 이상인 사람의 이름, 부서 ,월급을 출력하라.

SELECT 
ename,
deptno,
sal
    FROM emp
    WHERE deptno = 30 AND sal >= 1500;

--27. 문제) 이름의 첫 글자가 K로 시작하거나 부서번호가 30인 사람의 사원번호, 이름, 부서번호를 출력하라.

SELECT
empno,
ename,
deptno
    FROM emp
    WHERE ename LIKE 'K%' OR deptno =30;
 
--28. 문제) 급여가 $1,500 이상이고 부서번호가 30번인 사원 중 직업이MANAGER인 사람의 정보를 출력하라

SELECT *
    FROM emp
    WHERE sal >= 1500 AND deptno = 30 AND job = 'MANAGER';
 
--29. 문제) 부서번호가 30인 사람의 모든 정보를 출력하고 직원번호로 SORT(정렬)하라.

SELECT *
    FROM emp
WHERE deptno = 30
ORDER BY empno;

--30. 문제) 직원들의 급여가 많은 순으로 SORT(정렬) 하라.

SELECT *
    FROM emp
ORDER BY sal DESC;

--31. 문제) 부서번호로 ASCENDING SORT한 후 급여가 많은 사람 순으로 출력하라.
--( 한개 이상의 열로 정렬시 콤마(,)를 사용합니다.)

SELECT *
    FROM emp
ORDER BY deptno, sal DESC;


--32. 문제) 부서번호가 DESCENDING SORT하고, 이름 순으로 ASCENDING SORT 급여 순으로 DESCENDING SORT 하라.

SELECT 
deptno,
ename,
sal
    FROM emp
ORDER BY deptno DESC, ename ASC, sal DESC;

--33. 10번부서의 모든 직원에게 급여의 13%를 보너스로 지급하기로 하였다. 이름, 급여, 보너스금액, 부서번호를 출력하라
--( 소수점은 반올림함.)

SELECT
ename,
sal,
ROUND(sal* 0.13) AS bonus,
deptno
    FROM emp
    WHERE deptno = 10;
    
--34. 직원의 이름, 급여, 커미션, 총액(급여+커미션)을 구하여 총액이 많은 순서로 출력하여라.
--(단, 커미션이 null인 사원도 0으로 해서 포함.)

SELECT
ename,
sal,
NVL(comm, 0),
sal+NVL(comm, 0) AS 총액
--COALESCE(sal+comm,sal) AS 총액 --첫번째가 null이면 두번째 반환, 두번째도 null이면 세번째반환,..
    FROM emp
ORDER BY 총액 DESC;

 
--35. 급여가 $1,500부터 $3,000 사이의 사원에 대해서만 급여의 15%를 회비로 지불하기로 하였다.
--모든 사원의 이름, 급여, 회비(소수이하 2자리에서 반올림)를 출력하여라.
--(단, 회비는 달러표시$로 시작하고 소수점 1자리까지 출력)

SELECT
ename,
sal,
TO_CHAR(ROUND((sal *0.15),1), '$999.9') AS 회비
    FROM emp
    WHERE sal BETWEEN 1500 AND 3000;


--36. 사원수가 5명이 넘는 부서의 부서명과 사원수 조회(emp와 dept 조인)

SELECT
dname,
count(*) 
FROM emp e
JOIN dept d
    ON d.deptno= e.deptno
GROUP BY dname
HAVING COUNT(*)> 5;


--37. 직업별 급여합계가  5000을 초과하는 각 직무에 대해서 직무와 월 급여 합계를 조회  
--단 판매원('SALESMAN')은 제외하고 월 급여 합계로 내림차순 정렬

SELECT
job,
sum(sal)
    FROM emp
WHERE job != 'SALESMAN'
GROUP BY job
HAVING sum(sal) > 5000
ORDER BY SUM(sal) DESC;


--38. 사원들의 사원번호(empno), 사원명(ename), 급여(sal), 급여등급(grade)을 출력하시오.
--(테이블 salgrade 조인 )

SELECT 
empno, ename, sal, grade
FROM emp
JOIN salgrade
    ON sal between losal AND hisal;
    
SELECT
empno, ename, sal, grade
    FROM emp e, salgrade s
    WHERE e.sal BETWEEN s.losal AND s.hisal;
    
--39.  부서별(deptno)로 사원의 수와 커미션(comm)을 받은 사원의 수를 출력하여 보시오?

SELECT
deptno,
count(*) AS 사원수,
count(comm) AS "커미션 받은 사원 수"
    FROM emp
GROUP BY deptno;

--40.  부서번호(deptno)가 10은 '총무부', 20은 '개발부', 30은 영업부'라고 하여 
--이름, 부서번호, 부서명 순으로 출력하여 보시오. (decode 나 case 함수 사용)

SELECT
ename,
deptno,
CASE deptno
    WHEN 10 THEN '총무부'
    WHEN 20 THEN '개발부'
    WHEN 30 THEN '영업부'
END AS 부서명    
FROM emp;
    

SELECT
ename,
deptno,
    DECODE(deptno,
            10, '총무부',
            20, '개발부',
            30, '영업부') AS 부서명
    FROM emp;
    
    
    

-----41) dept 테이블의 loc 컬럼에서 'DALLAS' 라는 문자열을 가진 열만 검색한다
--LIKE or INSTR

SELECT *
    FROM dept
    WHERE loc LIKE '%DALLAS%';

SELECT *
    FROM dept
    WHERE INSTR(loc, 'DALLAS')>0; --특정 문자열을 가진 열
    
-----42) dept 테이블의 loc 컬럼에서 'DALLAS' 라는 문자열을 가지지 않은 열만 검색한다
--LIKE or INSTR 활용

SELECT *
    FROM dept
    WHERE loc NOT LIKE '%DALLAS%';
    
    
SELECT *
    FROM dept
    WHERE INSTR(loc, 'DALLAS')=0; --특정 문자열을 가지지 않음. 가지지 않으면 0 반환.


---43) loc의 중간 공백을 제거하고 출력 
----REPLACE. 대체할 문자열을 지정하지 않으면 해당 문자열은 삭제됨.
SELECT 
deptno, 
dname, 
REPLACE(loc, ' ') --공백을 제거하기 위해 사용 가능. 
    FROM dept; 
    
    
----44)'안녕@ddfa.com'에서 아이디 부분만 추출(dual테이블 활용)
 SELECT 
'안녕@ddfa.com' AS 테스트메일,
SUBSTR('안녕@ddfa.com',1,INSTR('안녕@ddfa.com','@')-1) AS 아이디
    FROM dual;

----45)'990301-1010102' 에서 뒷자리 부분 *로 표시(dual테이블 활용)
SELECT 
'990301-1010102' AS 주민번호,
REPLACE('990301-1010102', SUBSTR('990301-1010102',8),'*******')
    FROM dual;
    
SELECT 
'990301-1010102' AS 주민번호,
RPAD(REPLACE('990301-1010102', SUBSTR('990301-1010102',8)), 15, '*')
    FROM dual;  
    

----교재 125p. 
----46) emp 테이블을 사용해 사원이름(ename)이 S로 끝나는 사원 데이터 모두 출력

SELECT *
    FROM emp
    WHERE ename LIKE '%S';
    
----교재 125p.   
----47)emp테이블 사용, 30번 부서(deptno)에서 근무하고 있는 사원중에
--직책(job)이 SALESMAN인 사원의 empno, ename, job, sal, deptno 출력

SELECT
empno,
ename,
job,
sal,
deptno
    FROM emp
    WHERE deptno = 30;
    
----교재 125p.   
----48)emp테이블을 사용해 20번, 30번 부서에 근무하고 있는 사원중,
--급여가(sal) 2000초과인 사원을
--집합 연산자를 사용하지 않고/ 사용해서 empno, ename, job, sal, deptno 출력

SELECT
empno,
ename,
job,
sal,
deptno
    FROM emp
    WHERE deptno IN (20, 30) AND sal >2000;
    
SELECT
empno, ename, job, sal, deptno
    FROM emp
    WHERE deptno = 20 AND sal >2000
UNION
SELECT
empno, ename, job, sal, deptno
    FROM emp
    WHERE deptno = 30 AND sal >2000;
    

----교재 126p.   
----49)not between A and B 연산자를 쓰지 않고,
--급여(sal) 값이 2000이상 3000 이하 범위 외의 값을 가진 데이터만 출력.

SELECT *
    FROM emp
    WHERE sal <2000 OR sal >3000;
    
    
----교재 126p.   
----50)사원 이름에 E가 포함되어 있는 30번 부서의 사원 중
--급여가 1000~2000 사이가 아닌 사원의 ename, empno, sal, deptno 출력

SELECT 
ename, empno, sal, deptno
    FROM emp
    WHERE ename LIKE '%E%' 
          AND deptno = 30
          AND sal NOT BETWEEN 1000 AND 2000;
          
----교재 126p.   
----51)추가 수당(comm)이 존재하지 않고 상급자(mgr)가 있고
--직책(job)이 MANAGER, CLERK인 사원 중에서 사원 이름의 두 번째 글자가 L이 아닌 사원의 전체 정보 출력

SELECT *
    FROM emp
    WHERE comm is null 
          AND mgr is not null
          AND job IN ('MANAGER','CLERK')
          AND ename NOT LIKE '_L%';
          
----교재 174p.
----52)emp 테이블에서 
--사원 이름(ename)이 다섯글자 이상, 여섯글자 미만인 사원 중
---empno, empno의 뒷 두자리를 **로 출력한 masking_empno, 
--ename, 사원 이름 첫글자 외 나머지 글자만큼 *기호로 출력 하는 masking_ename 출력

SELECT
empno,
REPLACE(empno,SUBSTR(empno,-2),'**') AS masking_empno,
ename,
REPLACE(ename,SUBSTR(ename,2),'****') AS masking_ename
    FROM emp
    WHERE LENGTH(ename) = 5;
    
SELECT
empno,
RPAD(SUBSTR(empno,1,2), 4, '*') AS masking_empno,
ename,
RPAD(SUBSTR(ename,1,1),5, '*') AS masking_ename
    FROM emp
    WHERE LENGTH(ename) = 5;
    
/*
SELECT EMPNO,
       RPAD(SUBSTR(EMPNO, 1, 2), 4, '*') AS MASKING_EMPNO,
       ENAME,
       RPAD(SUBSTR(ENAME, 1, 1), LENGTH(ENAME), '*') AS MASKING_ENAME
 FROM  EMP
 WHERE LENGTH(ENAME) >= 5
   AND LENGTH(ENAME) < 6; 
*/

------교재 174p.
----53)emp테이블에서 사원들의 월 평균 근무일수는 21.5일.
--하루 근무시간을 8시간으로 봤을 때 사원들의 하루 급여(day_pay)와 시급(time_pay)을 계산해 출력.
--단 하루 급여는 소수점 세번째 자리에서 버리고(두 번째자리까지 표시), 시급은 두 번째 소수점에서 반올림
--empno, ename, sal, day_pay, time_pay

SELECT
empno,
ename,
TRUNC(sal/21.5, 2) AS day_pay,
ROUND(sal/21.5/8, 1) AS time_pay
FROM emp;


-----------------------------------------------------------------------------------------------
------교재 175p.
----54)emp테이블에서 사원들은 입사일(hiredate)을 기준으로 3개월이 지난 후 첫 월요일에 정직원이 됨.
-- 사원들이 정직원이 되는 날짜(R_job)를 YYYY-MM-DD 형식으로 출력.
--단 추가수당(comm)이 없는 사원의 추가수당은 N/A로 출력
--empno, ename, hiredate, R_job, comm

SELECT
empno,
ename,
hiredate,
TO_CHAR(NEXT_DAY(ADD_MONTHS(hiredate, 3), '월요일'), 'YYYY-MM-DD') AS R_job,
NVL(TO_CHAR(COMM), 'N/A') AS COMM --comm열의 자료형은 number임
--NVL(comm, 'N/A') 
FROM emp;

SELECT*
FROM emp;

----교재 175p.
---55)emp 테이블의 모든 사원을 대상으로 직속 상관이 사원번호(mgr)를 다음과 같은 조건을 기준으로 변환해서
--chg_mgr열에 출력하시오/ empno, ename, mgr, chg_mgr
/*
직속 상관의 사원번호가 존재하지 않을 경우 0000
앞 두자리가 75일 경우 5555
76일 경우 6666
77일 경우 7777
78일 경우 8888
그 외 직속 상관 사원번호의 경우- 본래 직속 상관의 사원번호 그대로 출력
*/

SELECT
empno, ename, mgr,
CASE 
     WHEN mgr IS NULL    THEN '0000'  
     WHEN mgr LIKE '75%' THEN '5555'
     WHEN mgr LIKE '76%' THEN '6666'
     WHEN mgr LIKE '77%' THEN '7777'
     WHEN mgr LIKE '78%' THEN '8888'
                         ELSE TO_CHAR(mgr)
END AS chg_mgr
FROM emp;

SELECT
empno, ename, mgr,
CASE 
    WHEN mgr IS NULL             THEN '0000'
    WHEN SUBSTR(mgr, 1,2) = '75' THEN '5555'
    WHEN SUBSTR(mgr, 1,2) = '76' THEN '6666'
    WHEN SUBSTR(mgr, 1,2) = '77' THEN '7777'
    WHEN SUBSTR(mgr, 1,2) = '78' THEN '8888'
                            ELSE TO_CHAR(mgr)
END AS chg_mgr
FROM emp;


----교재 212p.
---56) emp테이블을 이용, 부서번호(deptno), 평균급여(avg_sal), 최고급여(max_sal), 최저급여(min_sal), 사원수(cnt)를 출력
--단, 평균 급여를 출력할 때 소수점을 제외하고, 각 부서번호 별로 출력

SELECT
deptno AS 부서번호,
TRUNC(AVG(sal)) AS 평균급여,
MAX(sal) AS 최고급여,
MIN(sal) AS 최저급여,
COUNT(*) AS 사원수
    FROM emp
GROUP BY deptno;


----교재 212p.
---57)같은 직책(job)에 종사하는 사원이 3명 이상인 직책과 인원수를 출력

SELECT
        job,
        COUNT(*)
FROM emp
GROUP BY job
HAVING COUNT(*) >=3;


----교재 212p.
---58)사원들의 입사연도(hire_year)를 기준으로 부서별로 몇 명이 입사했는지 출력, hire_year, deptno, cnt
SELECT
        TO_CHAR(hiredate, 'YYYY') AS hire_year,
        deptno,
        COUNT(*) AS cnt
FROM emp
GROUP BY TO_CHAR(hiredate, 'YYYY'), deptno;


----교재 213p.
---59)추가 수당(comm)을 받는 사원 수와 받지 않는 사원 수 출력. exist_comm(o, x), cnt

SELECT
NVL2(TO_CHAR(comm), 'O', 'X') AS exist_com, --널이 아니면 'o' 널이면 'x'
COUNT(*) AS cnt
FROM emp
GROUP BY NVL2(TO_CHAR(comm), 'O', 'X');


----교재 213p.
---60) 각 부서의 입사 연도별 사원 수, 최고 급여, 급여 합, 평균 급여를 출력, 그리고 각 부서별 소계와 총계 출력.
--ROLLUP

SELECT DEPTNO,
       TO_CHAR(HIREDATE, 'YYYY') AS HIRE_YEAR,
       COUNT(*) AS CNT,
       MAX(SAL) AS MAX_SAL,
       SUM(SAL) AS SUM_SAL,
       AVG(SAL) AS AVG_SAL
  FROM EMP
GROUP BY ROLLUP(DEPTNO, TO_CHAR(HIREDATE, 'YYYY')); 


----교재 239p.
---61) 급여(SAL)가 2000 초과인 사원들의 부서 정보, 사원정보를 출력하라. (deptno, dname, empno, ename,sal)
--SQL-99이전 방식과 SQL-99방식을 각각 사용해 작성

SELECT  --등가조인(JOIN~ON)
        d.deptno, d.dname,
        e.empno, e.ename, e.sal
FROM emp e
JOIN dept d
    ON e.deptno = d.deptno
WHERE sal > 2000
ORDER BY deptno;


-- SQL-99 이전 방식
SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.SAL
  FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO
   AND E.SAL > 2000;

-- SQL-99방식(NATURAL JOIN)
SELECT DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.SAL
  FROM EMP E NATURAL JOIN DEPT D
 WHERE E.SAL > 2000;



----교재 239p.
---62) 각 부서별 평균 급여, 최대 급여, 최소 급여, 사원수 출력(deptno, dname, avg_sal, max_sal, min_sal, cnt)
--SQL-99이전 방식과 SQL-99방식을 각각 사용해 작성


SELECT
d.deptno, d.dname, 
AVG(sal) AS avg_sal, 
MAX(sal) AS max_sal,
MIN(sal) AS min_sal,
COUNT(*)
FROM emp e, dept d
WHERE e.deptno = d.deptno
GROUP BY d.deptno, d.dname;

SELECT 
d.deptno, d.dname, 
AVG(sal) AS avg_sal, 
MAX(sal) AS max_sal,
MIN(sal) AS min_sal,
COUNT(*)
FROM emp e JOIN dept d ON e.deptno = d.deptno
--FROM EMP E JOIN DEPT D USING (DEPTNO) --join ~using(기준열)
GROUP BY d.deptno, d.dname;   


----교재 239p.
---63) 모든 부서 정보와 사원 정보를 부서번호, 사원이름 순으로 정렬해(각각 오름차순) 출력하라. DEPT가 오른쪽. 왼쪽 테이블이 NULL값이어도 출력.
--SQL-99이전 방식과 SQL-99방식을 각각 사용해 작성
--DEPTNO, DNAME, EMPNO, ENAME, JOB, SAL


SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.JOB, E.SAL
FROM EMP E, DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO
ORDER BY D.DEPTNO, E.ENAME;


--DEPT를 왼쪽에 놓고 품
SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.JOB, E.SAL
FROM DEPT D
LEFT OUTER JOIN EMP E ON (e.deptno = d.deptno)
ORDER BY D.DEPTNO, E.ENAME;


/* 오른쪽 외부 조인

SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.JOB, E.SAL
  FROM EMP E, DEPT D
 WHERE E.DEPTNO(+) = D.DEPTNO
ORDER BY D.DEPTNO, E.ENAME;

SELECT D.DEPTNO, D.DNAME, E.EMPNO, E.ENAME, E.JOB, E.SAL
FROM EMP E RIGHT OUTER JOIN DEPT D ON (E.DEPTNO = D.DEPTNO)
ORDER BY D.DEPTNO, E.ENAME;
*/



----교재 240p. 제대로 못 품 20200428
---64)다음과 같이 모든 부서 정보, 사원 정보, 급여 등급 정보, 각 사원의 직속 상관의 정보를 부서번호, 사원 번호 순서로 정렬해 출력.
--SQL-99이전 방식과 SQL-99방식을 각각 사용해 작성
--DEPTNO, DNAME, EMPNO, ENAME, MGR, SAL, DEPTNO_1, LOSAL, HISAL, GRADE, MGR_EMPNO, MGR_ENAME
--(그외 값이 NULL이어도 DEPTNO, DNAME은 출력)

--필요한게 뭘까? DEPT, EMP 등가조인, EMP 자체조인, EMP, SALGRADE 비등가조인, 외부조인

/* 비동등조인의 예. SQL-99
SELECT employee_id, first_name, salary, grade
FROM  employees 
JOIN    salarygrade
ON salary BETWEEN losalary AND hisalary;
*/

--SQL-99 이전
SELECT D.DEPTNO, D.DNAME,
       E.EMPNO, E.ENAME, E.MGR, E.SAL, E.DEPTNO,
       S.LOSAL, S.HISAL, S.GRADE,
       E2.EMPNO AS MGR_EMPNO, E2.ENAME AS MGR_ENAME
  FROM EMP E, DEPT D, SALGRADE S, EMP E2
 WHERE E.DEPTNO(+) = D.DEPTNO
   AND E.SAL BETWEEN S.LOSAL(+) AND S.HISAL(+)
   AND E.MGR = E2.EMPNO(+)
ORDER BY D.DEPTNO, E.EMPNO; 

--SQL-99 이후
SELECT D.DEPTNO, D.DNAME,
       E.EMPNO, E.ENAME, E.MGR, E.SAL, E.DEPTNO,
       S.LOSAL, S.HISAL, S.GRADE,
       E2.EMPNO AS MGR_EMPNO, E2.ENAME AS MGR_ENAME
  FROM EMP E RIGHT OUTER JOIN DEPT D
                ON (E.DEPTNO = D.DEPTNO)
              LEFT OUTER JOIN SALGRADE S
                ON (E.SAL BETWEEN S.LOSAL AND S.HISAL)
              LEFT OUTER JOIN EMP E2
                ON (E.MGR = E2.EMPNO)
ORDER BY D.DEPTNO, E.EMPNO; 




----교재 262p.
---65) ALLEN과 같은 직책(JOB)인 사원들의 사원 정보, 부서 정보를 출력.
--JOB, EMPNO, ENAME, SAL, DEPTNO, DNAME
--서브쿼리

SELECT
        E.JOB, E.EMPNO, E.ENAME, E.SAL, D.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO 
        AND JOB=   (SELECT JOB
                     FROM EMP
                     WHERE ENAME = 'ALLEN');
             
SELECT
    E.JOB, E.EMPNO, E.ENAME, E.SAL, D.DEPTNO, D.DNAME
FROM EMP E
JOIN DEPT D
        ON E.DEPTNO = D.DEPTNO
WHERE JOB = (SELECT JOB
             FROM EMP
             WHERE ENAME = 'ALLEN');



----교재 262p.
---66) 전체 사원의 평균 급여(SAL)보다 높은 급여를 받는 사원들의 사원 정보, 부서 정보, 급여 등급 정보를 출력하는 SQL문 작성
--급여가 많은 순으로 정렬하되, 급여가 같은 경우 사원 번호를 기준으로 오름차순 정렬
--EMPNO, ENAME, DNAME, HIREDATE, LOC, SAL, GRADE
--등가조인, 비등가조인, 서브쿼리

SELECT
E.EMPNO, E.ENAME,
D.DNAME, e.hiredate, d.loc, E.SAL, s.grade
FROM EMP E, DEPT D, SALGRADE S
    WHERE e.deptno = d.deptno
    AND E.SAL BETWEEN S.LOSAL AND S.HISAL
    AND e.sal > (SELECT AVG(SAL)
                FROM EMP)
ORDER BY e.sal DESC, e.empno asc; 


SELECT
E.EMPNO, E.ENAME,
D.DNAME, e.hiredate, d.loc, E.SAL, s.grade
    FROM EMP E
    JOIN DEPT D
        ON e.deptno = d.deptno
    JOIN SALGRADE S
        ON E.SAL BETWEEN S.LOSAL AND S.HISAL
    WHERE E.SAL > (SELECT AVG(SAL)
                   FROM EMP);
        
        



----교재 263p.
---67) 10번 부서에 근무하는 사원 중 30번 부서에는 존재하지 않는 직책을 가진 사원들의 사원 정보, 부서정보 출력
--EMPNO, ENAME, JOB, DEPTNO, DNAME, LOC

SELECT
e.empno, e.ename, e.job, d.deptno, d.dname, d.loc
FROM EMP E 
JOIN DEPT D 
    ON E.DEPTNO = D.DEPTNO
WHERE d.deptno = 10
AND job NOT IN (SELECT job   --- SELECT DISTINCT JOB. 어차피 JOB의 종류에 따른 것이므로
                  FROM emp
                  WHERE deptno = 30);



----교재 263p.
---68)직책이 SALESMAN인 사람들의 최고급여보다 높은 급여를 받는 사원들의 사원 정보, 급여등급 정보를 출력
--EMPNO, ENAME, SAL, GRADE
--다중행 함수를 사용하는 방법과 사용하지 않는 방법을 각각 쓰고, 사원번호를 기준으로 오름차순 정렬
--조인, 서브쿼리, 다중행 함수

--다중행 함수 사용
SELECT
E.EMPNO, E.ENAME, E.SAL, S.GRADE
FROM EMP E
JOIN SALGRADE S
    ON E.SAL BETWEEN S.LOSAL AND S.HISAL
WHERE SAL > (SELECT MAX(SAL)
             FROM EMP
             WHERE JOB = 'SALESMAN')
ORDER BY EMPNO;


--다중행 함수 사용X
SELECT
E.EMPNO, E.ENAME, E.SAL, S.GRADE
FROM EMP E
JOIN SALGRADE S
    ON E.SAL BETWEEN S.LOSAL AND S.HISAL
WHERE SAL > ALL (SELECT SAL   --SELECT DISTINCT SAL
                FROM EMP
                WHERE JOB = 'SALESMAN')
ORDER BY EMPNO;


----교재 287p.
---69) EMP, DEPT, SALGRADE를 복사한 COPY_~ 테이블로 진행.
--COPY_DEPT 테이블에 50, 60, 70, 80번 부서를 등록

CREATE TABLE COPY_EMP 
AS SELECT * FROM EMP;
CREATE TABLE COPY_DEPT 
AS SELECT * FROM DEPT;
CREATE TABLE COPY_SALGRADE 
AS SELECT * FROM SALGRADE;

INSERT INTO COPY_DEPT (DEPTNO, DNAME, LOC)
                VALUES(50, 'ORACLE', 'BUSAN'); 
INSERT INTO COPY_DEPT (DEPTNO, DNAME, LOC)
                VALUES(60, 'SQL', 'ILSAN');
INSERT INTO COPY_DEPT (DEPTNO, DNAME, LOC)
                VALUES(70, 'SELECT', 'INCHEON');
INSERT INTO COPY_DEPT (DEPTNO, DNAME, LOC)
                VALUES(80, 'DML', 'BUNDANG');
                
SELECT * FROM COPY_DEPT;


----교재 287p.
---70) COPY_EMP 테이블에 다음 8명의 사원 정보 등록 (책 참고)

--시퀀스 사용해서 해볼까
CREATE SEQUENCE 이름시퀀스;
CREATE SEQUENCE 사원번호시퀀스
START WITH 7201;

INSERT INTO COPY_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
                VALUES (사원번호시퀀스.nextval, 'TEST_USER'||이름시퀀스.nextval, 'MANAGER', 7788, TO_DATE('2016-01-02','YYYY-MM-DD'), 4500, NULL, 50);

INSERT INTO COPY_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
                VALUES (사원번호시퀀스.nextval, 'TEST_USER'||이름시퀀스.nextval, 'CLERK', 7201, TO_DATE('2016-02-21','YYYY-MM-DD'), 1800, NULL, 50);
                
INSERT INTO COPY_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
                VALUES (사원번호시퀀스.nextval, 'TEST_USER'||이름시퀀스.nextval, 'ANALYST', 7201, TO_DATE('2016-04-11','YYYY-MM-DD'), 3400, NULL, 60);   
                
INSERT INTO COPY_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
                VALUES (사원번호시퀀스.nextval, 'TEST_USER'||이름시퀀스.nextval, 'SALESMAN', 7201, TO_DATE('2016-05-31','YYYY-MM-DD'), 2700, 300, 60);
                
INSERT INTO COPY_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
                VALUES (사원번호시퀀스.nextval, 'TEST_USER'||이름시퀀스.nextval, 'CLERK', 7201, TO_DATE('2016-07-20','YYYY-MM-DD'), 2600, NULL, 70);    

INSERT INTO COPY_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
                VALUES (사원번호시퀀스.nextval, 'TEST_USER'||이름시퀀스.nextval, 'CLERK', 7201, TO_DATE('2016-09-08','YYYY-MM-DD'), 2600, NULL, 70);                 
                
 INSERT INTO COPY_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
                VALUES (사원번호시퀀스.nextval, 'TEST_USER'||이름시퀀스.nextval, 'LECTURER', 7201, TO_DATE('2016-10-28','YYYY-MM-DD'), 2300, NULL, 80);   
                
 INSERT INTO COPY_EMP(EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
                VALUES (사원번호시퀀스.nextval, 'TEST_USER'||이름시퀀스.nextval, 'STUDENT', 7201, TO_DATE('2018-03-09','YYYY-MM-DD'), 1200, NULL, 80);        
                
SELECT * FROM COPY_EMP;


----교재 288p.
---71) COPY_EMP에 속한 사원 중 50번 부서에서 근무하는 사원들의 평균급여보다 많은 급여를 받고 있는 사원들을 70번 부서로 옮기는 SQL문 작성
--EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO

UPDATE copy_emp
SET DEPTNO = 70
WHERE SAL > (SELECT AVG(SAL)
            FROM COPY_EMP
             WHERE DEPTNO = 50); 
                
SELECT * FROM COPY_EMP
WHERE DEPTNO = 70;


----교재 288p.
---72) COPY_EMP에 속한 사원 중, 60번 부서의 사원 중에 입사일이 가장 빠른 사원보다 늦게 입사한 사원의 급여를 10%인상하고 80번 부서로 옮기는 SQL문 작성

UPDATE COPY_EMP
SET SAL = SAL*1.1, DEPTNO = 80
WHERE HIREDATE > (SELECT MIN(HIREDATE)
                  FROM COPY_EMP
                  WHERE DEPTNO = 60);
                  
SELECT * FROM COPY_EMP WHERE DEPTNO = 80;


----교재 289p.
---73)COPY_EMP에 속한 사원 중, 급여 등급이 5인 사원 삭제.

DELETE FROM COPY_EMP E
   WHERE EMPNO IN(SELECT EMPNO
                  FROM COPY_EMP E
                  JOIN COPY_SALGRADE S
                     ON E.SAL BETWEEN S.LOSAL AND S.HISAL
                  WHERE S.GRADE = 5);

SELECT * FROM COPY_EMP;

/*
DELETE FROM CHAP10HW_EMP
 WHERE EMPNO IN (SELECT E.EMPNO
                   FROM CHAP10HW_EMP E, CHAP10HW_SALGRADE S
                  WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL
                    AND S.GRADE = 5);
*/



----사원테이블 평균 급여보다 많은 급여를 받는 사원의 목록을 추출하세요




--------------------------------------------------
---- SCOTT 계정 예제 -- 1. 사원번호가 7902번인 사원의 부서 번호를 30으로 수정
 UPDATE emp
 SET deptno = 30
 WHERE empno = 7902;

-- 2. 부서번호 20의 사원들 급여가 10% 인상됨
UPDATE emp
SET sal = sal * 1.1
WHERE deptno = 20;

-- 3. 모든 사원의 입사일을 오늘로 수정
SUPDATE emp
     SET hiredate = SYSDATE


----------------
SELECT 
empno, d.deptno, ename, sal
FROM emp e
JOIN dept d
    ON e.deptno = d.deptno
WHERE e.deptno =20 
     AND e.sal > (SELECT AVG(sal)
                  FROM emp);

SELECT *
    FROM emp
    WHERE EXISTS (SELECT dname
                    FROM dept
                    WHERE deptno= 10);
                    

SELECT *
FROM emp
WHERE (deptno, sal) IN (SELECT deptno, max(sal) 
                        FROM emp   
                        GROUP BY deptno);
                        
                        
                        
SELECT * FROM emp;                        


/*
10. EMP 테이블에서 부서 인원이 4명보다 많은 부서의 부서번호, 인원수, 급여의 합을 출력하세요.(GROUP BY, HAVING)



(결과물)









11. 직업(JOB)별로 최소 급여를 받는 사원의 정보를 사원번호, 이름, 업무, 부서명을 출력하세요. 단, 직업별로 내림차순 정렬하세요.



(결과물)







12. 각 사원 별 커미션이 0 또는 NULL이고 부서위치가 ‘GO’로 끝나는 사원의 정보를 사원번호, 사원이름, 커미션, 부서번호, 부서명, 부서위치를 출력하세요. 단, 보너스가 NULL이면 0으로 출력하세요.



(결과물)





13. 1980년~1980년 사이에 입사된 각 부서별 사원수를 부서번호, 부서명, 입사1980, 입사1981, 입사1982로 출력하세요.



(결과물)





14. 1981년 6월 1일 ~ 1981년 12월 31일 입사자 중 부서명이 SALES인 사원의 부서번호, 사원명, 직업, 입사일을 출력하세요. 단, 입사일 오름차순 정렬하세요.



(결과물)





15. 현재 시간과 현재 시간으로부터 한 시간 후의 시간을 출력하세요. 단, 현재시간 포맷은 ‘4자리년-2자일월-2자리일 24시:2자리분:2자리초’로 출력하고, 한 시간후 포맷은 ‘4자리년-2자일월-2자리일 24시:2자리분:2자리초’로 출력하세요.



(결과물)





16. 각 부서별 사원수를 출력하라. 단, 부서별 사원수가 없더라도 부서번호, 부서명은 출력하고, 부서별 사원수가 0인 경우 ‘없음’ 출력하고, 부서번호 오름차순 정렬하세요.



(결과물)





17. 사원 테이블에서 각 사원의 사원번호, 사원명, 매니저번호, 매니저명을 출력하세요. 단, 각 사원의 급여(SAL)는 매니저 급여보다 많거나 같습니다.



(결과물)





18. 각 부서별로 1981년 5월 31일 이후 입사자의 부서번호, 부서명, 사원번호, 사원명, 입사일을 출력하세요. 단, 부서별 사원정보가 없더라도 부서번호, 부서명은 출력하고, 부서번호 오름차순 정렬하고, 입사일 오름차순 정렬하세요.

*/

/*
-- 50) 모든 사원의 이름, 부서번호, 부서이름을 표시하시오.(emp,dept)
SELECT E.ENAME, E.DEPTNO, D.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;
 
--51) 업무가 MANAGER인 사원의 정보를 이름,업무,부서명,근무지 순으로
--    출력하시오.(emp,dept)
SELECT E.ENAME, E.JOB, D.DNAME, D.LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
    AND E.JOB = 'MANAGER';
 
-- 52) 커미션을 받고 급여가 1,600이상인 사원의 
-- 사원이름,부서명,근무지를 출력하시오
SELECT E.ENAME, D.DNAME, D.LOC, E.DEPTNO, D.DEPTNO, 
    E.COMM, E.SAL
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
    AND E.COMM IS NOT NULL
    AND E.SAL >= 1600;
 
-- 53) 근무지가 CHICAGO인 모든 사원의 
-- 이름,업무,부서번호 및 부서이름을 표시하시오.
SELECT E.ENAME, E.JOB, E.DEPTNO, D.DEPTNO, D.DEPTNO, D.DNAME, D.LOC    
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
    AND D.LOC = 'CHICAGO';
 
-- 54) 근무지별로 근무하는 사원의 수가 5명 이하인 경우, 
-- 인원이 적은 도시순으로 정렬하시오.
-- (근무 인원이 0명인 곳도 표시)
SELECT D.LOC, COUNT(E.EMPNO)
FROM EMP E, DEPT D
WHERE E.DEPTNO(+) = D.DEPTNO
GROUP BY D.LOC
HAVING COUNT(E.EMPNO) <= 5
ORDER BY COUNT(E.EMPNO);
 
-- 55) 사원의 이름 및 사원 번호를 관리자의 이름과 관리자 번호와 함께 표시하고 
-- 각각의 열 레이블은 employee, emp#, manager, mgr#로 지정하시오.
SELECT A.ENAME employee, A.EMPNO emp#, B.ENAME manager, B.EMPNO mgr#
FROM EMP A, EMP B
WHERE A.MGR = B.EMPNO;
 
-- 56) 관리자보다 먼저 입사한 모든 사원의 이름 및 입사일을 
-- 관리자의 이름 및 입사일과 함께 표시하고 
-- 열 레이블을 각각 employee, emp hired, manager, mgr hired로 지정
SELECT A.ENAME employee, A.HIREDATE "emp hired", 
    B.ENAME manager, B.HIREDATE "mgr hired"
FROM EMP A, EMP B
WHERE A.MGR = B.EMPNO
    AND A.HIREDATE < B.HIREDATE;
 
-- 57) 사원의 이름 및 사원번호를 관리자의 이름과 관리자 번호와 함께 표시하고 
-- 각각의 열 레이블은 employee, emp#, manager, mgr#로 지정하는데 
-- King을 포함하여 관리자가 없는 모든 사원을 표시하도록 하고 
-- 결과를 사원번호를 기준으로 정렬
SELECT A.ENAME employee, A.EMPNO emp#, B.ENAME manager, B.EMPNO mgr#
FROM EMP A, EMP B
WHERE A.MGR = B.EMPNO(+)
ORDER BY A.EMPNO ASC;
 
-- 58) 지정한 부서번호, 사원이름 및 지정한 사원과 동일한 부서에서 
-- 근무하는 모든 사원을 표시하도록 질의를 작성하고 
-- 부서번호는 department, 사원이름은 employee, 
-- 동일한 부서에서 근무하는 사원은 colleague로 표시하시오.
-- (부서번호, 사원이름,동료 순으로 오름차순 정렬)
SELECT A.DEPTNO department, A.ENAME employee, B.DEPTNO, B.ENAME colleague
FROM EMP A, EMP B
WHERE A.DEPTNO = B.DEPTNO   
    AND A.EMPNO <> B.EMPNO  -- I != J
ORDER BY A.DEPTNO, A.ENAME, B.ENAME;    
 
-- 59)10번 부서에서 근무하는 사원들의 
-- 부서번호, 부서이름, 사원이름, 월급, 급여등급을 출력하시오.
SELECT E.DEPTNO, D.DNAME, E.ENAME, E.SAL, S.GRADE
FROM EMP E, DEPT D, SALGRADE S
WHERE E.DEPTNO = D.DEPTNO    -- E와 D를 inner join해주고 s와는 cross join을 하여
    AND E.SAL BETWEEN S.LOSAL AND S.HISAL     --그중에서 SAL의 범위가 LOSAL과 HISAL사이에 있는것을 Select 
    AND E.DEPTNO = 10;

*/